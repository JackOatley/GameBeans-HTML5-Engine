{"version":3,"sources":["webpack://GameBeans/webpack/universalModuleDefinition","webpack://GameBeans/webpack/bootstrap","webpack://GameBeans/./core/js/instance.js","webpack://GameBeans/./core/js/draw.js","webpack://GameBeans/./core/js/sprite.js","webpack://GameBeans/./core/js/room.js","webpack://GameBeans/./core/js/math.js","webpack://GameBeans/./core/js/input.js","webpack://GameBeans/./core/js/generator.js","webpack://GameBeans/./core/js/canvas.js","webpack://GameBeans/./core/js/transition.js","webpack://GameBeans/./core/js/data/grid.js","webpack://GameBeans/./core/js/Sound.js","webpack://GameBeans/./core/js/objectVars.js","webpack://GameBeans/./core/js/object.js","webpack://GameBeans/./core/js/keyvalues.js","webpack://GameBeans/./core/js/camera.js","webpack://GameBeans/./core/js/global.js","webpack://GameBeans/./core/js/main.js","webpack://GameBeans/./core/js/tween.js","webpack://GameBeans/./core/js/font.js","webpack://GameBeans/./core/js/App.js","webpack://GameBeans/./core/js/utils/pool.js","webpack://GameBeans/./core/js/color.js","webpack://GameBeans/./core/js/event.js","webpack://GameBeans/./core/js/drawing/primitive.js","webpack://GameBeans/./core/js/action.js","webpack://GameBeans/./core/js/tilemap.js","webpack://GameBeans/./core/js/compile.js","webpack://GameBeans/./core/js/core.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","global","_global__WEBPACK_IMPORTED_MODULE_6__","aInstances","otherStack","instance","instanceArray","instanceHardLimit","obj","x","y","_object_js__WEBPACK_IMPORTED_MODULE_2__","addConsoleText","_GB_stop","setup","inst","objectName","assetType","Number","boxCollision","assign","spr","_sprite_js__WEBPACK_IMPORTED_MODULE_3__","sprite","originX","originY","width","height","addToArray","updateBoundingBox","updateCollisionBox","executeEvent","length","depth","splice","push","createMoving","speed","direction","console","warn","newInst","find","findRandom","_math_js__WEBPACK_IMPORTED_MODULE_0__","randomInt","count","forEach","setRotation","rotation","relative","this","setDirection","mouseOn","boxTop","_input_js__WEBPACK_IMPORTED_MODULE_1__","mouse","_draw_js__WEBPACK_IMPORTED_MODULE_4__","offsetY","boxBottom","boxLeft","offsetX","boxRight","step","dt","updateAnimation","updatePosition","instanceExecuteListeners","triggerEvents","event","index","imageSpeed","images","behavior","animationBehavior","type","gravVector","lengthDirX","terminal","gravityDirection","lengthDirY","speedX","gravity","speedY","scaleY","scaleX","box","top","left","bottom","right","destroy","exists","instances","indexOf","draw","visible","events","drawSelf","drawDebug","shape","rectangle","color","changeSprite","listeners","listener","instanceCollisionInstance","target","arr","getAllInstances","box1","targ","box2","otherInst","other","actions","executeActions","err","error","pop","executeEventAll","a","action","condition","steps","scope","flow","args","newArgs","_compile_js__WEBPACK_IMPORTED_MODULE_5__","actionExpression","undefined","apply","stepAll","slice","drawAll","doDepthSort","sort","b","clearDestroyed","pool","release","__webpack_exports__","font","fontSize","textAlign","textBaseline","context","defaultTransform","targetStack","imageSmoothing","setTarget","domElement","getContext","resetTarget","getTarget","clear","col","_canvas_js__WEBPACK_IMPORTED_MODULE_2__","save","restore","reset","imageSmoothingEnabled","setTransform","globalAlpha","setImageSmoothing","enable","transform","scale","rotate","rot","DEGTORAD","translate","setDefault","opts","trans","skewX","skewY","moveX","moveY","setColor","g","h","_sprite_js__WEBPACK_IMPORTED_MODULE_1__","ctx","Math","floor","frame","img","drawImage","clip","w","spriteTiled","dx","dy","rx","ry","drawSprite","canvas","canv","setFont","size","align","baseline","text","bitmap","lookup","useBitmap","_font_js__WEBPACK_IMPORTED_MODULE_3__","method","bitmapFont","image","lineLength","drawMethod","stroke","strokeStyle","strokeColor","lineWidth","fillStyle","drawX","startN","endN","toString","pattern","start","end","lineHeight","measureText","lines","split","maxWidth","words","line","testLine","_drawWord","x1","y1","x2","y2","beginPath","moveTo","lineTo","ellipse","xr","yr","style","arc","PI","healthbar","amount","background","createLinearGradient","addColorStop","fill","rect","drawY","word","cn","metrics","sx","sy","sw","sh","_color_js__WEBPACK_IMPORTED_MODULE_0__","aSprites","aLength","names","array","options","atlas","atlasIndex","newSprite","frames","addFrame","source","src","Image","ready","onload","log","cache","document","createElement","setOrigin","readyAll","tint","imageData","getImageData","data","rgb","pixelDataTint","hexToRgb","putImageData","toDataURL","Room","[object Object]","backgroundMethod","current","transition","_transition_js__WEBPACK_IMPORTED_MODULE_1__","prefab","callback","enter","_instance_js__WEBPACK_IMPORTED_MODULE_2__","ptrn","createPattern","fillRect","_generator_js__WEBPACK_IMPORTED_MODULE_0__","classStaticMatch","math","RADTODEG","cos","sin","sign","min","max","ceil","random","choose","lengthDir","pointDistance","sqrt","pointDirection","atan2","angleDifference","angle1","angle2","diff","_keyvalues_js__WEBPACK_IMPORTED_MODULE_1__","element","__mouse","pressed","down","released","wheelUp","wheelDown","__keyboard","__touch","held","move","cancel","__triggerEvents","input","keyboard","touch","init","initMouse","initKeyboard","initTouch","addEventListener","e","preventDefault","button","focus","_canvas__WEBPACK_IMPORTED_MODULE_0__","main","getBoundingClientRect","clientX","clientY","delta","wheelDelta","code","handleTouchEnd","touches","changedTouches","pageX","pageY","getTriggerEvents","triggers","keys","includes","mouseMap","update","Generator","functionFromConstructor","functionFromMethod","Canvas","application","crisp2D","_draw_js__WEBPACK_IMPORTED_MODULE_0__","setMain","oncontextmenu","dom","el","getElementById","body","appendChild","clearRect","_generator__WEBPACK_IMPORTED_MODULE_1__","noop","Transition","time","alpha","allInstances","prefabs","fade","Grid","myGrid","_utils_pool_js__WEBPACK_IMPORTED_MODULE_0__","_generator_js__WEBPACK_IMPORTED_MODULE_1__","Sound","Audio","test","oncanplaythrough","isEnabled","playSound","paused","cloneNode","onError","soundName","promise","play","then","onended","loop","currentTime","_end","onEnd","catch","pause","basic","JSON","stringify","solid","behaviours","_depth","js_objectVars","set","proto","parse","object_GameObject","id","addCollisionListener","params","eventAddAction","constructor","Camera","angle","_room_js__WEBPACK_IMPORTED_MODULE_0__","follow","gridLocked","Array","isArray","weight","_draw_js__WEBPACK_IMPORTED_MODULE_1__","_generator_js__WEBPACK_IMPORTED_MODULE_2__","updateAll","arrayExecute","fps","lastTick","performance","now","tickLength","last","host","parent","location","hostname","join","_room__WEBPACK_IMPORTED_MODULE_1__","enableMouse","_input__WEBPACK_IMPORTED_MODULE_2__","enableKeyboard","enableTouch","hideCursor","cursor","tick","setGameSpeed","timestamp","requestAnimationFrame","nextTick","numTicks","_global__WEBPACK_IMPORTED_MODULE_4__","timeSinceTick","ticks","gameUpdate","queueUpdates","_draw__WEBPACK_IMPORTED_MODULE_5__","_camera__WEBPACK_IMPORTED_MODULE_6__","_instance__WEBPACK_IMPORTED_MODULE_3__","_transition__WEBPACK_IMPORTED_MODULE_7__","tween","blend","n1","n2","perc","x3","y3","xa","ya","xb","yb","xc","yc","xm","ym","xn","yn","Font","hasFontFace","hasBitmapFont","applyCss","head","map","cx","alphaThreshold","pointImageData","atlasCtx","createImageData","lookupTable","charMap","fillText","cy","minY","maxY","_generator__WEBPACK_IMPORTED_MODULE_0__","_canvas_js__WEBPACK_IMPORTED_MODULE_0__","App","Pool","newConstructor","stack","def","hex","result","exec","parseInt","componentToHex","rgbToHex","_keyvalues_js__WEBPACK_IMPORTED_MODULE_0__","roomEnter","roomLeave","collision","resize","postfix","Primitive","points","texture","format","modifier","tris","orderTriangleList","len","pp","x0","pts","u0","u","u1","u2","v0","v","v1","v2","y0","closePath","delta_a","delta_b","delta_c","delta_d","delta_f","delta_e","applyModifier","orderQuadList","tri","drawBasic","newPoints","newP","_tween__WEBPACK_IMPORTED_MODULE_14__","_transition__WEBPACK_IMPORTED_MODULE_15__","_drawing_primitive__WEBPACK_IMPORTED_MODULE_16__","actionSet","varName","actionTest","op","actionJump","actionJumpRandom","moveFree","moveDirect","_main__WEBPACK_IMPORTED_MODULE_9__","moveSpeedX","moveReverseX","moveReverseY","actionWrap","thisRoom","_room__WEBPACK_IMPORTED_MODULE_0__","roomW","roomH","actionConfine","func","script","eval","message","toFixed","GAME","_draw__WEBPACK_IMPORTED_MODULE_2__","self","debug","_canvas__WEBPACK_IMPORTED_MODULE_7__","_color__WEBPACK_IMPORTED_MODULE_8__","_sprite__WEBPACK_IMPORTED_MODULE_6__","_Sound__WEBPACK_IMPORTED_MODULE_1__","_input__WEBPACK_IMPORTED_MODULE_4__","_math__WEBPACK_IMPORTED_MODULE_5__","_camera__WEBPACK_IMPORTED_MODULE_10__","_App__WEBPACK_IMPORTED_MODULE_11__","_data_grid__WEBPACK_IMPORTED_MODULE_12__","Tilemap","_tilemap__WEBPACK_IMPORTED_MODULE_13__","blockBegin","blockEnd","exitEvent","roomNext","next","roomPrevious","previous","instanceCreate","instanceCreateMoving","instanceDestroy","instanceSetRotation","instanceSetDirection","alert","confirm","drawSetColor","drawSetFont","drawSetFontSize","setFontSize","drawText","soundPlay","snd","soundStop","stop","_data_grid_js__WEBPACK_IMPORTED_MODULE_1__","_draw_js__WEBPACK_IMPORTED_MODULE_2__","textureAtlas","tileWidth","tileHeight","tileSpacing","tileOverlay","tilesWide","mapHeight","layers","__gap","__atlas","layer","mapWidth","tw","th","tsw","gap","overlay","renderWidth","renderHeight","order","startX","startY","endX","endY","tile","iX","iY","_sprite_js__WEBPACK_IMPORTED_MODULE_2__","_Sound__WEBPACK_IMPORTED_MODULE_3__","_room_js__WEBPACK_IMPORTED_MODULE_4__","Compiler","exp","isNaN","isFunction","isOperator","isCss","sIndex","charAt","newArr","splitCharacters","string","num","_global_js__WEBPACK_IMPORTED_MODULE_0__","isResource","isSingleWord","isString","_object_js__WEBPACK_IMPORTED_MODULE_1__","booleans","assignmentOperators","_data_grid__WEBPACK_IMPORTED_MODULE_18__"],"mappings":"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","file":"GameBeans.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"GameBeans\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"GameBeans\"] = factory();\n\telse\n\t\troot[\"GameBeans\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 26);\n","import math from \"./math.js\";\r\nimport input from \"./input.js\";\r\nimport object from \"./object.js\";\r\nimport sprite from \"./sprite.js\";\r\nimport draw from \"./draw.js\";\r\nimport Compiler from \"./compile.js\";\r\nimport global from \"./global\";\r\n\r\n//\r\nwindow.global = global;\r\nlet aInstances = [];\r\nlet otherStack = [];\r\n\r\n//\r\nlet instance = {\r\n\t\r\n\t//\r\n\tinstanceArray: aInstances,\r\n\tinstanceHardLimit: 1000,\r\n\t\r\n\t/**\r\n\t * @param {object} obj\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t */\r\n\tcreate: function(obj, x, y) {\r\n\t\t\r\n\t\t//\r\n\t\tlet o = object.get(obj);\r\n\t\tif (o === null) {\r\n\t\t\twindow.addConsoleText(\"#F00\", \"No such object as \" + obj);\r\n\t\t\twindow._GB_stop();\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\t\tlet inst = new o(x, y);\r\n\t\treturn inst;\r\n\t},\r\n\t\r\n\tsetup: function(inst, o, x, y) {\r\n\t\tinst.object = o;\r\n\t\tinst.objectName = o.objectName;\r\n\t\tinst.assetType = \"instance\";\r\n\t\tinst.x = Number(x);\r\n\t\tinst.y = Number(y);\r\n\t\tinst.boxCollision = Object.assign({}, inst.boxCollision);\r\n\t\t\r\n\t\t//\r\n\t\tlet spr = sprite.get(inst.sprite);\r\n\t\tif (spr) {\r\n\t\t\tinst.boxCollision.x = spr.originX;\r\n\t\t\tinst.boxCollision.y = spr.originY;\r\n\t\t\tinst.boxCollision.width = spr.width;\r\n\t\t\tinst.boxCollision.height = spr.height;\r\n\t\t}\r\n\t\t\r\n\t\t//\r\n\t\tinstance.addToArray(inst);\r\n\t\tinstance.updateBoundingBox(inst);\r\n\t\tinstance.updateCollisionBox(inst);\r\n\t\tinstance.executeEvent(inst, \"create\");\r\n\t},\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\taddToArray: function(inst) {\r\n\t\tlet i;\r\n\t\tfor (i=0; i<aInstances.length; i++) {\r\n\t\t\tif (inst.depth <= aInstances[i].depth) {\r\n\t\t\t\taInstances.splice(i, 0, inst);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\taInstances.push(inst);\r\n\t},\r\n\r\n\t/**\r\n\t * @param {object} obj\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t * @param {number} speed\r\n\t * @param {number} direction\r\n\t */\r\n\tcreateMoving: function(obj, x, y, speed, direction) {\r\n\r\n\t\tif ( aInstances.length >= instance.instanceHardLimit ) {\r\n\t\t\tconsole.warn( \"instance number hard limit reached:\", instance.instanceHardLimit );\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet newInst = instance.create(obj, x, y);\r\n\t\tnewInst.speed = speed;\r\n\t\tnewInst.direction = direction;\r\n\t\treturn newInst;\r\n\t\t\r\n\t},\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tfind: function(obj, n) {\r\n\t\tif (typeof obj === \"function\") obj = obj.objectName;\r\n\t\tlet i, c=0, inst;\r\n\t\tfor (i=0; i<aInstances.length; i++) {\r\n\t\t\tinst = instance.instanceArray[i];\r\n\t\t\tif (inst.objectName === obj) {\r\n\t\t\t\tif (c++ === n)\r\n\t\t\t\t\treturn inst;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t},\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tfindRandom: function(obj) {\r\n\t\tif (typeof obj === \"function\") obj = obj.objectName;\r\n\t\tlet n = math.randomInt(0, instance.count(obj) - 1);\r\n\t\treturn instance.find(obj, n);\r\n\t},\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tcount: function(objectName) {\r\n\t\tlet c=0;\r\n\t\tinstance.instanceArray.forEach((inst) => {\r\n\t\t\tc += (inst.objectName === objectName);\r\n\t\t});\r\n\t\treturn c;\r\n\t},\r\n\r\n\t/**\r\n\t * @param {number} rotation\r\n\t * @param {boolean} relative\r\n\t */\r\n\tsetRotation: function(rotation, relative) {\r\n\t\tthis.rotation = (relative) ? this.rotation + rotation : rotation;\r\n\t},\r\n\r\n\t/**\r\n\t * @param {number} rotation\r\n\t * @param {boolean} relative\r\n\t */\r\n\tsetDirection: function(direction, relative) {\r\n\t\tthis.direction = (relative) ? this.direction + direction : direction;\r\n\t},\r\n\r\n\t/**\r\n\t * @param {object} inst Check the mouse is over this instance.\r\n\t */\r\n\tmouseOn: function(inst) {\r\n\t\treturn !(inst.boxTop > input.mouse.y/2 - draw.offsetY\r\n\t\t|| inst.boxBottom < input.mouse.y/2 - draw.offsetY\r\n\t\t|| inst.boxLeft > input.mouse.x/2 - draw.offsetX\r\n\t\t|| inst.boxRight < input.mouse.x/2 - draw.offsetX);\r\n\t},\r\n\r\n\t/**\r\n\t * @param {instance} inst Instance to excute step event of.\r\n\t * @param {time} dt Delta time.\r\n\t */\r\n\tstep: function(inst, dt) {\r\n\t\t\r\n\t\t// step events\r\n\t\tinstance.executeEvent(inst, \"step\");\r\n\t\tinstance.updateAnimation(inst, dt);\r\n\t\tinstance.updatePosition(inst, dt);\r\n\t\tinstance.updateBoundingBox(inst);\r\n\t\tinstance.updateCollisionBox(inst);\r\n\t\t\r\n\t\t// collision events\r\n\t\tinstance.instanceExecuteListeners(inst);\r\n\t\t\r\n\t\t// input events\r\n\t\tinput.triggerEvents.forEach((event) => {\r\n\t\t\tinstance.executeEvent(inst, event);\r\n\t\t});\r\n\t\t\r\n\t},\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tupdateAnimation: function(inst, dt) {\r\n\t\t\r\n\t\tinst.index += inst.imageSpeed;\r\n\t\tlet spr = sprite.get( inst.sprite );\r\n\t\tif ( spr ) {\r\n\t\t\tlet length = spr.images.length;\r\n\t\t\tif ( inst.index >= length ) {\r\n\t\t\t\t\r\n\t\t\t\tlet behavior = inst.animationBehavior;\r\n\t\t\t\tlet type = typeof behavior;\r\n\t\t\t\t\r\n\t\t\t\t//\r\n\t\t\t\tif ( type === \"string\" ) {\r\n\t\t\t\t\r\n\t\t\t\t\t//\r\n\t\t\t\t\tif ( behavior === \"loop\" ) {\r\n\t\t\t\t\t\tinst.index -= length;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t//\r\n\t\t\t\t\telse if ( behavior === \"stop\" ) {\r\n\t\t\t\t\t\tinst.index = length - 1;\r\n\t\t\t\t\t\tinst.imageSpeed = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//\r\n\t\t\t\telse if ( type === \"function\" ) {\r\n\t\t\t\t\tbehavior.call( inst );\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t},\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tupdatePosition: function(inst, dt) {\r\n\t\t\r\n\t\t// if the instance is already falling at terminal velocity then we no longer apply gravity\r\n\t\tlet gravVector = {\r\n\t\t\tx: math.lengthDirX( inst.terminal, inst.gravityDirection ),\r\n\t\t\ty: math.lengthDirY( inst.terminal, inst.gravityDirection )\r\n\t\t};\r\n\t\t\r\n\t\tif ( gravVector.x > 0 && inst.speedX <= gravVector.x\r\n\t\t||   gravVector.x < 0 && inst.speedX >= gravVector.x ) {\r\n\t\t\tinst.speedX += math.lengthDirX( inst.gravity, inst.gravityDirection );\r\n\t\t}\r\n\t\t\r\n\t\tif ( gravVector.y > 0 && inst.speedY <= gravVector.y\r\n\t\t||   gravVector.y < 0 && inst.speedY >= gravVector.y ) {\r\n\t\t\tinst.speedY += math.lengthDirY( inst.gravity, inst.gravityDirection );\r\n\t\t}\r\n\r\n\t\t// move instance\r\n\t\tinst.x += inst.speedX * dt;\r\n\t\tinst.y += inst.speedY * dt;\r\n\t\t\r\n\t},\r\n\r\n\t/**\r\n\t * @param {object} i Instance whos bounding box to update.\r\n\t */\r\n\tupdateBoundingBox: function(i) {\r\n\t\tlet spr = sprite.get(i.sprite);\r\n\t\tif (spr === null) return;\r\n\t\ti.boxTop = i.y - spr.originY * i.scaleY;\r\n\t\ti.boxLeft = i.x - spr.originX * i.scaleX;\r\n\t\ti.boxBottom = i.boxTop + spr.height * i.scaleY;\r\n\t\ti.boxRight = i.boxLeft + spr.width * i.scaleX;\r\n\t},\r\n\r\n\t/**\r\n\t * @param {object} i Instance.\r\n\t */\r\n\tupdateCollisionBox: function(i) {\r\n\t\tlet box = i.boxCollision;\r\n\t\tbox.top = i.y - box.y * i.scaleY;\r\n\t\tbox.left = i.x - box.x * i.scaleX;\r\n\t\tbox.bottom = box.top + box.height * i.scaleY;\r\n\t\tbox.right = box.left + box.width * i.scaleX;\r\n\t},\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tdestroy: function(inst) {\r\n\t\tinst.exists = false;\r\n\t\tlet index = inst.object.instances.indexOf(inst);\r\n\t\tinst.object.instances.splice(index, 1);\r\n\t},\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tdraw: function(inst) {\r\n\t\tif (!inst.visible) return;\r\n\t\tif (inst.events[\"draw\"]) {\r\n\t\t\tinstance.executeEvent(inst, \"draw\")\r\n\t\t} else {\r\n\t\t\tinstance.drawSelf(inst);\r\n\t\t}\r\n\t},\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tdrawSelf: function(inst) {\r\n\t\tif (inst.sprite === null) return;\r\n\t\tdraw.sprite(\r\n\t\t\tinst.sprite,\r\n\t\t\tinst.index,\r\n\t\t\tinst.x, inst.y,\r\n\t\t\tinst.scaleX, inst.scaleY,\r\n\t\t\tinst.rotation\r\n\t\t);\r\n\t},\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tdrawDebug: function(inst) {\r\n\t\tlet box = inst.boxCollision;\r\n\t\tdraw.shape.rectangle(\r\n\t\t\tbox.left,\r\n\t\t\tbox.top,\r\n\t\t\tbox.right - box.left,\r\n\t\t\tbox.bottom - box.top, {\r\n\t\t\t\tcolor: \"#FF000055\"\r\n\t\t\t}\r\n\t\t);\r\n\t},\r\n\r\n\t/**\r\n\t * @param {object} sprite\r\n\t */\r\n\tchangeSprite: function(sprite) {\r\n\t\tthis.sprite = sprite;\r\n\t},\r\n\r\n\t/**\r\n\t * @param {object} inst\r\n\t */\r\n\tinstanceExecuteListeners: function( inst ) {\r\n\r\n\t\tinst.listeners.forEach( listener => {\r\n\t\t\tswitch ( listener.type ) {\r\n\t\t\t\t\r\n\t\t\t\tcase ( \"collision\" ):\r\n\t\t\t\t\tinstance.instanceCollisionInstance( inst, listener.target );\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\t\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t},\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tinstanceCollisionInstance: function(inst, target) {\r\n\t\t\r\n\t\tlet arr = object.getAllInstances(target);\r\n\t\tlet box1 = inst.boxCollision;\r\n\t\tarr.forEach(function(targ) {\r\n\t\t\t\r\n\t\t\t// same instance\r\n\t\t\tif (inst === targ)\r\n\t\t\t\treturn;\r\n\t\t\t\r\n\t\t\t// no collision\r\n\t\t\tlet box2 = targ.boxCollision;\r\n\t\t\tif (box1.left > box2.right\r\n\t\t\t|| box1.right < box2.left\r\n\t\t\t|| box1.top > box2.bottom\r\n\t\t\t|| box1.bottom < box2.top) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\t// execute collision event\r\n\t\t\tinstance.executeEvent(inst, \"collision_\" + target, targ);\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t},\r\n\r\n\t/**\r\n\t * @param {instance} inst\r\n\t * @param {event} event\r\n\t * @param {instance} otherInst The other instance, in collisions for example.\r\n\t */\r\n\texecuteEvent: function(inst, event, otherInst) {\r\n\t\t\r\n\t\t// set the current \"other\" instance\r\n\t\totherStack.push(window.other);\r\n\t\twindow.other = otherInst;\r\n\t\t\r\n\t\t//\r\n\t\ttry {\r\n\t\t\tif (inst.exists) {\r\n\t\t\t\tlet actions = inst.events[event];\r\n\t\t\t\tif (actions) {\r\n\t\t\t\t\tinstance.executeActions(inst, actions, otherInst);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (err) {\r\n\t\t\tconsole.error( err );\r\n\t\t\twindow.addConsoleText( \"#F00\",\r\n\t\t\t\t\"Failed to execute event [\" + event + \"]\"\r\n\t\t\t\t+ \" of object [\" + inst.objectName + \"]\"\r\n\t\t\t\t+ \" with error: \" + err );\r\n\t\t}\r\n\t\t\r\n\t\t// restore previous \"other\" instance\r\n\t\twindow.other = otherStack.pop();\r\n\t},\r\n\t\r\n\t/**\r\n\t * @param {string} event The event to secute for all instances.\r\n\t * @param {instace} other\r\n\t */\r\n\texecuteEventAll: function(event, otherInst) {\r\n\t\tfor (var n = 0; n < aInstances.length; n++)\r\n\t\t\tinstance.executeEvent(aInstances[n], event, otherInst);\r\n\t},\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\texecuteActions: function(inst, actions, otherInst) {\r\n\t\t\r\n\t\tlet condition = true,\r\n\t\t\tsteps = [],\r\n\t\t\tscope = 0,\r\n\t\t\ta, action;\r\n\t\t\r\n\t\tfor (a=0; a<actions.length; a++) {\r\n\t\t\t\r\n\t\t\taction = actions[a];\r\n\t\t\tswitch (action.flow) {\r\n\t\t\t\t\r\n\t\t\t\t// regular action\r\n\t\t\t\tcase (\"\"):\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (!condition)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst args = action.args;\r\n\t\t\t\t\tlet n, newArgs = [];\r\n\t\t\t\t\tfor (n = 0; n < args.length; n++) {\r\n\t\t\t\t\t\tswitch (args[n]) {\r\n\t\t\t\t\t\t\tcase (\"self\"): newArgs[n] = inst; break;\r\n\t\t\t\t\t\t\tcase (\"other\"): newArgs[n] = otherInst; break;\r\n\t\t\t\t\t\t\tdefault: newArgs[n] = Compiler.actionExpression.call(inst, args[n]); break\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tcondition = action.action.apply(inst, newArgs);\r\n\t\t\t\t\t(condition === undefined)\r\n\t\t\t\t\t\t? condition = true\r\n\t\t\t\t\t\t: steps[scope] = 0;\r\n\t\t\t\t\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\t\t// control actions\r\n\t\t\t\tcase (\"blockBegin\"): scope++; break;\r\n\t\t\t\tcase (\"blockEnd\"): scope--; break;\r\n\t\t\t\tcase (\"exitEvent\"): if (condition) return false;\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// exit from a single statement after an expression not contained in a block\r\n\t\t\tif (steps[scope]++ === 1)\r\n\t\t\t\tcondition = true;\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t},\r\n\r\n\t/**\r\n\t * @param {number} dt Delta time.\r\n\t */\r\n\tstepAll: function(dt) {\r\n\t\tlet arr = aInstances.slice();\r\n\t\tarr.forEach((i) => instance.step(i, dt));\r\n\t},\r\n\r\n\t/** */\r\n\tdrawAll: function() {\r\n\t\tif (instance.doDepthSort) {\r\n\t\t\tinstance.instanceArray.sort((a, b) => a.depth - b.depth);\r\n\t\t}\r\n\t\taInstances.forEach((i) => instance.draw(i));\r\n\t},\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tclearDestroyed: function() {\r\n\t\tfor (var n=aInstances.length-1; n>=0; n--) {\r\n\t\t\tlet i = aInstances[n];\r\n\t\t\tif (!i.exists) {\r\n\t\t\t\ti.exists = true;\r\n\t\t\t\ti.speedX = 0;\r\n\t\t\t\ti.speedY = 0;\r\n\t\t\t\ti.object.pool.release(i);\r\n\t\t\t\taInstances.splice(n, 1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport default instance;\r\n","import math from \"./math.js\";\r\nimport sprite from \"./sprite.js\";\r\nimport canvas from \"./canvas.js\";\r\nimport Font from \"./font.js\";\r\n\r\n//\r\nlet draw = {\r\n\t\r\n\t//\r\n\tcolor: \"#FFFFFF\",\r\n\tfont: \"Arial\",\r\n\tfontSize: 30,\r\n\ttextAlign: \"start\",\r\n\ttextBaseline: \"alphabetic\",\r\n\ttarget: null,\r\n\tcontext: null,\r\n\tdefaultTransform: [1, 0, 0, 1, 0, 0],\r\n\ttargetStack: [],\r\n\timageSmoothing: false,\r\n\toffsetX: 0,\r\n\toffsetY: 0,\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tsetTarget: function(target) {\r\n\t\tdraw.targetStack.push(draw.target);\r\n\t\tdraw.target = target;\r\n\t\tdraw.context = target.domElement.getContext(\"2d\");\r\n\t},\r\n\t\r\n\t/** */\r\n\tresetTarget: function() {\r\n\t\tlet target = draw.targetStack.pop();\r\n\t\tdraw.target = target;\r\n\t\tdraw.context = target.domElement.getContext( \"2d\" );\r\n\t},\r\n\t\r\n\t/** */\r\n\tgetTarget: function() {\r\n\t\treturn draw.target;\r\n\t},\r\n\t\r\n\t/** */\r\n\tclear: function(col) {\r\n\t\tcanvas.clear(draw.target, col);\r\n\t},\r\n\r\n\t/** */\r\n\tsave: function() {\r\n\t\tdraw.context.save();\r\n\t},\r\n\t \r\n\t/** */\r\n\trestore: function() {\r\n\t\tdraw.context.restore();\r\n\t},\r\n\t\r\n\t/** */\r\n\treset: function() {\r\n\t\tdraw.context.imageSmoothingEnabled = draw.imageSmoothing;\r\n\t\tdraw.context.setTransform(...draw.defaultTransform);\r\n\t\tdraw.context.globalAlpha = 1;\r\n\t},\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tsetImageSmoothing: function(enable) {\r\n\t\tdraw.imageSmoothing = enable;\r\n\t},\r\n\r\n\t//\r\n\ttransform: {\r\n\t\t\r\n\t\tscale: function(x, y) {\r\n\t\t\tdraw.context.scale(x, y);\r\n\t\t},\r\n\t\t\r\n\t\trotate: function(rot) {\r\n\t\t\tdraw.context.rotate(rot * math.DEGTORAD);\r\n\t\t},\r\n\t\t\r\n\t\ttranslate: function(x, y) {\r\n\t\t\tdraw.offsetX = x;\r\n\t\t\tdraw.offsetY = y;\r\n\t\t\tdraw.context.translate(x, y);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * @param {object} [opts={}]\r\n\t\t */\r\n\t\tsetDefault: function( opts = {} ) {\r\n\t\t\tlet trans = draw.defaultTransform;\r\n\t\t\tif (opts.scaleX) trans[0] = opts.scaleX;\r\n\t\t\tif (opts.skewX) trans[1] = opts.skewX;\r\n\t\t\tif (opts.skewY) trans[2] = opts.skewY;\r\n\t\t\tif (opts.scaleY) trans[3] = opts.scaleY;\r\n\t\t\tif (opts.moveX) trans[4] = opts.moveX;\r\n\t\t\tif (opts.moveY) trans[5] = opts.moveY;\r\n\t\t}\r\n\t},\r\n\r\n\t/**\r\n\t * @param {color} c Can be a number, a hex-value or an object containing R, G, B and optionally A properties or H, S, L and optionally A properties.\r\n\t */\r\n\tsetColor: function( c ) {\r\n\t\t\r\n\t\t// quick exit if c is already a CSS color value\r\n\t\tif ( typeof c === \"string\" ) {\r\n\t\t\tdraw.color = c;\r\n\t\t}\r\n\t\t\r\n\t\t// c is an object\r\n\t\telse {\r\n\t\t\t\r\n\t\t\t// RGB / RGBA\r\n\t\t\tif ( \"r\" in c && \"g\" in c && \"b\" in c ) {\r\n\t\t\t\tdraw.color = ( \"a\" in c )\r\n\t\t\t\t\t? \"rgba(\"+c.r+\",\"+c.g+\",\"+c.b+\",\"+c.a+\")\"\r\n\t\t\t\t\t: \"rgb(\"+c.r+\",\"+c.g+\",\"+c.b+\")\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// HSL / HSLA\r\n\t\t\telse if ( \"h\" in c && \"s\" in c && \"l\" in c ) {\r\n\t\t\t\tdraw.color = ( \"a\" in c )\r\n\t\t\t\t\t? \"hsla(\"+c.h+\",\"+c.s+\"%,\"+c.l+\"%,\"+c.a+\")\"\r\n\t\t\t\t\t: \"hsl(\"+c.h+\",\"+c.s+\"%,\"+c.l+\"%)\";\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t},\r\n\r\n\t/**\r\n\t * Draws the sprite at the given x, y position.\r\n\t * @param {sprite} sprite\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t */\r\n\tsprite: function(spr, index, x, y, scaleX, scaleY, rotation ) {\r\n\r\n\t\tspr = sprite.get( spr );\r\n\t\t\r\n\t\t//\r\n\t\tlet ctx = draw.context;\r\n\t\t\r\n\t\t//\r\n\t\tctx.save();\r\n\t\tctx.translate( x, y );\r\n\t\tctx.rotate( rotation * math.DEGTORAD );\r\n\t\tctx.scale( scaleX, scaleY );\r\n\t\t\r\n\t\t//\r\n\t\tindex = Math.floor(index) % spr.images.length;\r\n\t\t\r\n\t\t//\r\n\t\tlet frame = spr.images[index];\r\n\t\tlet img = frame.img;\r\n\t\tctx.drawImage(\r\n\t\t\timg, frame.clip.x, frame.clip.y,\r\n\t\t\tframe.clip.w, frame.clip.h,\r\n\t\t\t-spr.originX, -spr.originY,\r\n\t\t\tspr.width, spr.height\r\n\t\t);\r\n\t\t\r\n\t\t//\r\n\t\tctx.restore();\r\n\t},\r\n\r\n\t/**\r\n\t * Draws the sprite at the given x, y position.\r\n\t * @param {sprite} sprite\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t * @param {number} w\r\n\t * @param {number} h\r\n\t */\r\n\tspriteTiled: function(spr, index, x, y, w, h) {\r\n\t\tspr = sprite.get(spr);\r\n\t\tlet dx, dy, rx, ry;\r\n\t\tfor (rx=0, dx=x; rx<w; rx++, dx+=spr.width)\r\n\t\tfor (ry=0, dy=y; ry<h; ry++, dy+=spr.height) {\r\n\t\t\tdrawSprite(spr, index, dx, dy, 1, 1, 0);\r\n\t\t}\r\n\t},\r\n\r\n\t/**\r\n\t * Draws a canvas at the given position.\r\n\t * @param {canvas} canvas The canvas to draw.\r\n\t * @param {number} x The X position to draw at.\r\n\t * @param {number} y The Y position to draw at.\r\n\t */\r\n\tcanvas: function(canv, x, y) {\r\n\t\tdraw.context.drawImage(canv.domElement, x, y);\r\n\t},\r\n\t\r\n\t/**\r\n\t * @param {string} font\r\n\t * @param {number} size\r\n\t * @param {string} align Horizontal alignment.\r\n\t * @param {string} baseline Vertical alignment.\r\n\t */\r\n\tsetFont: function(font, size, align, baseline) {\r\n\t\tfont = typeof font === \"string\" ? font : font.name;\r\n\t\tdraw.font = font;\r\n\t\tdraw.fontSize = size;\r\n\t\tdraw.textAlign = align;\r\n\t\tdraw.textBaseline = baseline;\r\n\t\tconst ctx = draw.context;\r\n\t\tctx.font = size + \"px \" + font;\r\n\t\tctx.textAlign = align;\r\n\t\tctx.textBaseline = baseline;\r\n\t},\r\n\r\n\t/**\r\n\t * @param {string} text\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t */\r\n\ttext: function(text, x, y, opts = {}) {\r\n\t\t\r\n\t\tx = Number(x);\r\n\t\ty = Number(y);\r\n\t\t\r\n\t\tlet bitmap, lookup, scale, useBitmap = false;\r\n\t\tlet font = Font.get(draw.font);\r\n\t\tif (font && font.method === \"bitmap\") {\r\n\t\t\tuseBitmap = true;\r\n\t\t\tlookup = font.bitmapFont.lookup\r\n\t\t\tbitmap = font.bitmapFont.image;\r\n\t\t\tscale = draw.fontSize / font.bitmapFont.size;\r\n\t\t}\r\n\t\t\r\n\t\t//\r\n\t\tlet ctx = draw.context;\r\n\t\tlet drawMethod = \"fillText\";\r\n\t\tif (opts.stroke) {\r\n\t\t\tctx.strokeStyle = opts.strokeColor || draw.color;\r\n\t\t\tctx.lineWidth = opts.lineWidth || 2;\r\n\t\t\tdrawMethod = \"strokeText\";\r\n\t\t} else {\r\n\t\t\tctx.fillStyle = draw.color;\r\n\t\t}\r\n\t\t\r\n\t\t//\r\n\t\tlet lineLength;\r\n\t\tlet drawX = x;\r\n\t\tlet startN = 0;\r\n\t\tlet endN = text.toString().length;\r\n\t\tif (opts.pattern) {\r\n\t\t\tstartN = opts.pattern.start;\r\n\t\t\tendN = opts.pattern.end;\r\n\t\t}\r\n\t\t\r\n\t\t//\r\n\t\tlet lineHeight = ctx.measureText(\"M\").width * 1.2;\r\n\t\tlet lines = text.toString().split( \"#\" );\r\n\t\tfor (var i=0; i<lines.length; i++) {\r\n\t\t\t\r\n\t\t\tif ( opts.maxWidth ) {\r\n\t\t\t\tvar words = lines[i].split(' ');\r\n\t\t\t\tvar line = '';\r\n\t\t\t\t\r\n\t\t\t\tfor(var n = 0; n < words.length; n++) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar testLine = line + words[n] + ' ';\r\n\t\t\t\t\tvar metrics = ctx.measureText(testLine);\r\n\t\t\t\t\tvar testWidth = metrics.width;\r\n\t\t\t\t\tif (testWidth > opts.maxWidth && n > 0) {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet a = line.slice(0, startN);\r\n\t\t\t\t\t\tlet b = line.slice(startN, endN);\r\n\t\t\t\t\t\tdrawX += ctx.measureText(a).width;\r\n\t\t\t\t\t\tif ( 0 < endN ) {\r\n\t\t\t\t\t\t\t_drawWord(drawX, y, b, lookup, ctx, useBitmap, bitmap, scale, drawMethod);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlineLength = testLine.length;\r\n\t\t\t\t\t\tstartN -= lineLength;\r\n\t\t\t\t\t\tendN -= lineLength;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tline = words[n] + ' ';\r\n\t\t\t\t\t\ty += lineHeight;\r\n\t\t\t\t\t\tdrawX = x;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tline = testLine;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tlet a = line.slice(0, startN);\r\n\t\t\t\tlet b = line.slice(startN, endN);\r\n\t\t\t\tdrawX += ctx.measureText(a).width;\r\n\t\t\t\t_drawWord(drawX, y, b, lookup, ctx, useBitmap, bitmap, scale, drawMethod);\r\n\t\t\t\tlineLength = line.length;\r\n\t\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\r\n\t\t\t\tlet a = lines[i].slice(0, startN);\r\n\t\t\t\tlet b = lines[i].slice(startN, endN);\r\n\t\t\t\tdrawX += ctx.measureText(a).width;\r\n\t\t\t\t_drawWord(drawX, y, b, lookup, ctx, useBitmap, bitmap, scale, drawMethod);\r\n\t\t\t\tlineLength = lines[i].length;\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tdrawX = x;\r\n\t\t\ty += lineHeight;\r\n\t\t\tstartN -= lineLength;\r\n\t\t\tendN -= lineLength;\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t},\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tshape: {\r\n\t\t\r\n\t\t/**\r\n\t\t * @param {number} x1\r\n\t\t * @param {number} y1\r\n\t\t * @param {number} x2\r\n\t\t * @param {number} y2\r\n\t\t * @param {object} [opts={}]\r\n\t\t */\r\n\t\tline: function(x1, y1, x2, y2, opts = {}) {\r\n\t\t\tlet ctx = draw.context;\r\n\t\t\tctx.strokeStyle = opts.color || draw.color;\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.moveTo(x1, y1);\r\n\t\t\tctx.lineTo(x2, y2);\r\n\t\t\tctx.stroke();\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * @param {number} x1\r\n\t\t * @param {number} y1\r\n\t\t * @param {number} x2\r\n\t\t * @param {number} y2\r\n\t\t * @param {object} [opts={}]\r\n\t\t */\r\n\t\tellipse: function(x, y, xr, yr, opts = {}) {\r\n\t\t\r\n\t\t\t//\r\n\t\t\tlet ctx = draw.context;\r\n\t\t\tctx.save();\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.translate(x-xr, y-yr);\r\n\t\t\tctx.scale(xr, yr);\r\n\t\t\tctx.arc(1, 1, 1, 0, 2 * Math.PI, false);\r\n\t\t\tctx.restore();\r\n\t\t\t\r\n\t\t\t//\r\n\t\t\tlet style;\r\n\t\t\tif (opts.healthbar) {\r\n\t\t\t\tlet amount = opts.healthbar.amount || 1;\r\n\t\t\t\tlet color = opts.healthbar.color || \"#0F0\";\r\n\t\t\t\tlet background = opts.healthbar.background || \"#F00\";\r\n\t\t\t\tstyle = ctx.createLinearGradient( x-xr, 0, x+xr, 0 );\r\n\t\t\t\tstyle.addColorStop( 0, color );\r\n\t\t\t\tstyle.addColorStop( amount, color );\r\n\t\t\t\tstyle.addColorStop( amount, background );\r\n\t\t\t\tstyle.addColorStop( 1, background );\r\n\t\t\t} else {\r\n\t\t\t\tstyle = opts.color || draw.color;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//\r\n\t\t\tif (!opts.fill && !opts.stroke)\r\n\t\t\t\topts.fill = true;\r\n\t\t\t\r\n\t\t\t//\r\n\t\t\tif (opts.fill) {\r\n\t\t\t\tctx.fillStyle = style;\r\n\t\t\t\tctx.fill();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (opts.stroke) {\r\n\t\t\t\tctx.strokeStyle = style\r\n\t\t\t\tctx.lineWidth = opts.lineWidth || 1;\r\n\t\t\t\tctx.stroke();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * @param {number} x\r\n\t\t * @param {number} y\r\n\t\t * @param {number} w\r\n\t\t * @param {number} h\r\n\t\t * @param {object} [opts={}]\r\n\t\t */\r\n\t\trectangle: function(x, y, w, h, opts = {}) {\r\n\t\t\r\n\t\t\t//\r\n\t\t\tlet ctx = draw.context;\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.rect(x, y, w, h);\r\n\t\t\t\r\n\t\t\t//\r\n\t\t\tlet style;\r\n\t\t\tif ( opts.healthbar ) {\r\n\t\t\t\tlet amount = opts.healthbar.amount || 1;\r\n\t\t\t\tlet color = opts.healthbar.color || \"#0F0\";\r\n\t\t\t\tlet background = opts.healthbar.background || \"#F00\";\r\n\t\t\t\tstyle = ctx.createLinearGradient(x, 0, x+w, 0);\r\n\t\t\t\tstyle.addColorStop(0, color);\r\n\t\t\t\tstyle.addColorStop(amount, color);\r\n\t\t\t\tstyle.addColorStop(amount, background);\r\n\t\t\t\tstyle.addColorStop(1, background);\r\n\t\t\t} else {\r\n\t\t\t\tstyle = opts.color || draw.color;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//\r\n\t\t\tif (!opts.fill && !opts.stroke)\r\n\t\t\t\topts.fill = true;\r\n\t\t\t\r\n\t\t\t//\r\n\t\t\tif (opts.fill) {\r\n\t\t\t\tctx.fillStyle = style;\r\n\t\t\t\tctx.fill();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (opts.stroke) {\r\n\t\t\t\tctx.strokeStyle = style;\r\n\t\t\t\tctx.lineWidth = opts.lineWidth || 1;\r\n\t\t\t\tctx.stroke();\r\n\t\t\t}\r\n\t\t\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction _drawWord(drawX, drawY, word, lookup, ctx, useBitmap, bitmap, scale, drawMethod) {\r\n\tif (useBitmap) {\r\n\t\tlet dx = ~~drawX;\r\n\t\tfor (var cn=0; cn<word.length; cn++) {\r\n\t\t\tlet metrics = lookup[word[cn]];\r\n\t\t\tlet sx = metrics.left;\r\n\t\t\tlet sy = metrics.top;\r\n\t\t\tlet sw = metrics.right - metrics.left;\r\n\t\t\tlet sh = metrics.bottom - metrics.top;\r\n\t\t\tctx.drawImage(bitmap, sx, sy, sw, sh, dx, drawY, sw*scale, sh*scale);\r\n\t\t\tdx += (sw + 1) * scale;\r\n\t\t}\r\n\t} else {\r\n\t\tctx[drawMethod](word, drawX, drawY);\r\n\t}\r\n}\r\n\r\n//\r\nexport default draw;\r\n","/**\r\n * @module sprite\r\n */\r\n\r\n//\r\nimport color from \"./color.js\";\r\n\r\n//\r\nlet aSprites = [],\r\n\taLength = 0;\r\n\r\n/**\r\n *\r\n */\r\nlet sprite = {\r\n\t\r\n\t//\r\n\tnames: [],\r\n\tarray: aSprites,\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tcreate: function( options = {} ) {\r\n\r\n\t\t//\r\n\t\tlet atlas, atlasIndex;\r\n\t\tif ( options.atlas ) {\r\n\t\t\tatlasIndex = options.atlasIndex || 0;\r\n\t\t\tatlas = options.atlas.images[atlasIndex];\r\n\t\t}\r\n\t\t\r\n\t\t//\r\n\t\tlet newSprite = {\r\n\t\t\tassetType: \"sprite\",\r\n\t\t\tname: options.name || newSpriteName(),\r\n\t\t\toriginX: options.originX || 0,\r\n\t\t\toriginY: options.originY || 0,\r\n\t\t\twidth: 0,\r\n\t\t\theight: 0,\r\n\t\t\timages: []\r\n\t\t}\r\n\t\t\r\n\t\t//\r\n\t\tif ( options.frames ) {\r\n\t\t\toptions.frames.forEach( function( frame ) {\r\n\t\t\t\tsprite.addFrame( newSprite, {\r\n\t\t\t\t\tsource: frame.src\r\n\t\t\t\t});\r\n\t\t\t} );\r\n\t\t}\r\n\t\t\r\n\t\t//\r\n\t\tsprite.names[aLength] = newSprite.name;\r\n\t\taSprites[aLength++] = newSprite;\r\n\t\treturn newSprite;\r\n\r\n\t},\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\taddFrame: function( spr, options = {} ) {\r\n\t\t\r\n\t\tspr = sprite.get( spr );\r\n\t\t\r\n\t\t//\r\n\t\tlet atlas;\r\n\t\tif ( options.atlas ) {\r\n\t\t\tatlas = sprite.get( options.atlas ).images[0].img;\r\n\t\t}\r\n\t\t\r\n\t\tlet image = {\r\n\t\t\timg: atlas || new Image(),\r\n\t\t\tclip: null,\r\n\t\t\tready: false\r\n\t\t}\r\n\t\t\r\n\t\t//\r\n\t\tif ( options.source ) {\r\n\t\t\t\r\n\t\t\timage.img.onload = function() {\r\n\t\t\t\t\r\n\t\t\t\t//\r\n\t\t\t\timage.clip = {\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\tw: image.img.width,\r\n\t\t\t\t\th: image.img.height\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//\r\n\t\t\t\tif ( spr.width * spr.height === 0 ) {\r\n\t\t\t\t\tspr.width = image.clip.w;\r\n\t\t\t\t\tspr.height = image.clip.h;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//\r\n\t\t\t\timage.ready = true;\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\timage.img.src = options.source || \"\";\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\t//\r\n\t\tif ( atlas && options.clip ) {\r\n\t\t\t\r\n\t\t\t//\r\n\t\t\timage.clip = options.clip;\r\n\t\t\tconsole.log( image.clip );\r\n\t\t\t\r\n\t\t\t//\r\n\t\t\tif ( spr.width * spr.height === 0 ) {\r\n\t\t\t\tspr.width = image.clip.w;\r\n\t\t\t\tspr.height = image.clip.h;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//\r\n\t\t\timage.ready = true;\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\t//\r\n\t\tspr.images.push( image );\r\n\t\t\r\n\t},\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tcache: function( spr, options = {} ) {\r\n\t\t\r\n\t\tspr = sprite.get( spr );\r\n\t\tspr.images.forEach( function( frame ) {\r\n\t\t\tlet canvas = document.createElement( \"CANVAS\" );\r\n\t\t\tcanvas.width = options.width || frame.img.width;\r\n\t\t\tcanvas.height = options.height || frame.img.height;\r\n\t\t\tlet ctx = canvas.getContext( \"2d\" );\r\n\t\t\tctx.drawImage( frame.img, 0, 0, canvas.width+1, canvas.height+1 );\r\n\t\t\t\r\n\t\t\tframe.clip.x = 0;\r\n\t\t\tframe.clip.y = 0;\r\n\t\t\tframe.clip.w = canvas.width;\r\n\t\t\tframe.clip.h = canvas.height;\r\n\t\t\tframe.img = canvas;\r\n\t\t} );\r\n\t\t\r\n\t},\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tsetOrigin: function( spr, x, y ) {\r\n\t\t\r\n\t\tspr = sprite.get( spr );\r\n\t\tspr.originX = Number( x );\r\n\t\tspr.originY = Number( y );\r\n\t\t\r\n\t},\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\treadyAll: function() {\r\n\t\t\r\n\t\tfor ( var n=0; n<aLength; n++ ) {\r\n\t\t\tlet spr = aSprites[n];\r\n\t\t\tfor ( var i=0; i<spr.images.length; i++ ) {\r\n\t\t\t\tlet image = spr.images[i];\r\n\t\t\t\tif ( !image.ready ) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn true;\r\n\t\t\r\n\t},\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\ttint: function( spr, col ) {\r\n\t\t\r\n\t\tif ( typeof spr !== \"object\" )\r\n\t\t\tspr = sprite.get( spr );\r\n\t\t\r\n\t\t//\r\n\t\tspr.images.forEach( function( image ) {\r\n\t\t\t\r\n\t\t\t// create canvas, draw image\r\n\t\t\tlet canvas = document.createElement( \"CANVAS\" );\r\n\t\t\tlet ctx = canvas.getContext( \"2d\" );\r\n\t\t\tcanvas.width = spr.width;\r\n\t\t\tcanvas.height = spr.height;\r\n\t\t\tctx.drawImage( image.img, 0, 0 );\r\n\t\t\t\r\n\t\t\t// get data, do thing, put data back\r\n\t\t\tlet imageData = ctx.getImageData( 0, 0, canvas.width, canvas.height );\r\n\t\t\tpixelDataTint( imageData.data, (typeof col === \"object\") ? col : color.hexToRgb( col ) );\r\n\t\t\tctx.putImageData( imageData, 0, 0 );\r\n\t\t\t\r\n\t\t\t//\r\n\t\t\timage.img.src = canvas.toDataURL( \"image/png\" );\r\n\t\t\t\r\n\t\t} );\r\n\t\t\r\n\t},\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tget: function( name ) {\r\n\t\t\r\n\t\tif ( typeof name === \"object\" )\r\n\t\t\treturn name;\r\n\t\t\r\n\t\tfor ( var n = 0; n < aLength; n++ )\r\n\t\t\tif ( aSprites[n].name === name )\r\n\t\t\t\treturn aSprites[n];\r\n\t\t\t\r\n\t\treturn null;\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction newSpriteName() {\r\n\treturn \"Sprite_\" + aLength;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction pixelDataTint( data, rgb ) {\r\n\t\r\n\t// cache as much as possible, there could be a lot of pixels\r\n\tlet l = data.length,\r\n\t\tr = rgb.r / 255,\r\n\t\tg = rgb.g / 255,\r\n\t\tb = rgb.b / 255;\r\n\t\r\n\t//\r\n\tfor (var i = 0; i < l; i += 4) {\r\n\t\tdata[i]     = r * data[i]     >> 0;\r\n\t\tdata[i + 1] = g * data[i + 1] >> 0;\r\n\t\tdata[i + 2] = b * data[i + 2] >> 0;\r\n\t}\r\n\t\r\n}\r\n\r\n//\r\nexport default sprite;\r\n","import Generator from \"./generator.js\";\r\nimport Transition from \"./transition.js\";\r\nimport instance from \"./instance.js\";\r\nimport sprite from \"./sprite.js\";\r\nimport draw from \"./draw.js\";\r\n\r\n/**\r\n * @author Jack Oatley\r\n */\r\nexport default class Room {\r\n\r\n\t/**\r\n\t * @param {string} name\r\n\t * @param {number} width\r\n\t * @param {number} height\r\n\t */\r\n\tconstructor(name, width, height) {\r\n\t\tthis.name = name;\r\n\t\tthis.width = Number(width);\r\n\t\tthis.height = Number(height);\r\n\t\tthis.background = null;\r\n\t\tthis.backgroundMethod = \"no-repeat\";\r\n\t\tthis.instances = [];\r\n\t\tRoom.names.push(name);\r\n\t\tRoom.array.push(this);\r\n\t\tif (Room.current === null)\r\n\t\t\tRoom.current = this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {string} spr\r\n\t */\r\n\tsetBackground(spr) {\r\n\t\tthis.background = spr;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} inst Name of the instance to add.\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t */\r\n\taddInstance(inst, x, y) {\r\n\t\tif (typeof inst === \"object\") inst = inst.objectName;\r\n\t\tthis.instances.push({\r\n\t\t\tname: inst, x: x, y: y\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @param {object} [opts={}]\r\n\t */\r\n\tenter(opts = {}) {\r\n\t\t\r\n\t\tif (opts.transition) {\r\n\t\t\tnew Transition({\r\n\t\t\t\tprefab: opts.transition,\r\n\t\t\t\tcallback: Room.enter.bind(null, this)\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\t// leave room event\r\n\t\tinstance.executeEventAll(\"roomleave\");\r\n\t\t\r\n\t\t// clear current instances\r\n\t\tinstance.instanceArray.forEach(function(i) {\r\n\t\t\tinstance.destroy(i, false);\r\n\t\t});\r\n\r\n\t\t// goto new room and create new instances\r\n\t\tRoom.current = this;\r\n\t\tthis.instances.forEach(function(inst) {\r\n\t\t\tinstance.create(inst.name, inst.x, inst.y);\r\n\t\t});\r\n\t\t\r\n\t\t// enter room event\r\n\t\tinstance.executeEventAll(\"roomenter\");\r\n\r\n\t}\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tdraw() {\r\n\t\tlet spr = sprite.get(this.background);\r\n\t\tif ( spr !== null ) {\r\n\t\t\tvar canvas = draw.getTarget().domElement;\r\n\t\t\tvar ctx = canvas.getContext(\"2d\");\r\n\t\t\tlet image = spr.images[0].img;\r\n\t\t\tif ( this.backgroundMethod === \"stretch\" ) {\r\n\t\t\t\tctx.drawImage( image, 0, 0, canvas.width, canvas.height );\r\n\t\t\t} else {\r\n\t\t\t\tlet ptrn = ctx.createPattern( image, this.backgroundMethod );\r\n\t\t\t\tctx.fillStyle = ptrn;\r\n\t\t\t\tctx.fillRect( 0, 0, canvas.width, canvas.height );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/** */\r\n\tstatic next() {\r\n\t\tconst index = Room.array.indexOf(Room.current);\r\n\t\tRoom.enter(Room.array[index+1]);\r\n\t}\r\n\t\r\n\t/** */\r\n\tstatic previous() {\r\n\t\tconst index = Room.array.indexOf(Room.current);\r\n\t\tRoom.enter(Room.array[index-1]);\r\n\t}\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tstatic get(name) {\r\n\t\tif (typeof name === \"object\") return name;\r\n\t\tfor (var n=0; n<Room.array.length; n++) {\r\n\t\t\tif ( Room.array[n][\"name\"] === name ) {\r\n\t\t\t\treturn Room.array[n];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n}\r\n\r\nRoom.prototype.assetType = \"room\";\r\nRoom.names = [];\r\nRoom.array = [];\r\nRoom.current = null;\r\nGenerator.classStaticMatch(Room);","/**\r\n * @module math\r\n */\r\n\r\nlet math = {\r\n \r\n\t// constances\r\n\tPI: Math.PI,\r\n\tRADTODEG: 180 / Math.PI,\r\n\tDEGTORAD: Math.PI / 180,\r\n\t\t\r\n\t// copied functions\r\n\tcos: Math.cos,\r\n\tsin: Math.sin,\r\n\tsign: Math.sign,\r\n\t\t\r\n\t/**\r\n\t *\r\n\t */\r\n\trandomInt: function( min, max ) {\r\n\t\tmin = Math.ceil( min );\r\n\t\tmax = Math.floor( max );\r\n\t\treturn Math.floor( Math.random() * ( max - min + 1 ) ) + min;\r\n\t},\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tchoose: function( ...value ) {\r\n\t\treturn value[Math.floor( Math.random() * value.length )];\r\n\t},\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tlengthDir: (l, d) => {\r\n\t\td *= math.DEGTORAD;\r\n\t\treturn [Math.cos(d) * l, Math.sin(d) * l];\r\n\t},\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tlengthDirX: function(l, d) {\r\n\t\treturn Math.cos(d * math.DEGTORAD) * l;\r\n\t},\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tlengthDirY: function(l, d) {\r\n\t\treturn Math.sin(d * math.DEGTORAD) * l;\r\n\t},\r\n\t \r\n\t/**\r\n\t * @param {number} x1\r\n\t * @param {number} y1\r\n\t * @param {number} x2\r\n\t * @param {number} y2\r\n\t */\r\n\tpointDistance: function(x1, y1, x2, y2) {\r\n\t\tconst a = x1 - x2;\r\n\t\tconst b = y1 - y2;\r\n\t\treturn Math.sqrt(a*a + b*b);\r\n\t},\r\n\r\n\t/**\r\n\t * @param {number} x1\r\n\t * @param {number} y1\r\n\t * @param {number} x2\r\n\t * @param {number} y2\r\n\t */\r\n\tpointDirection: function( x1, y1, x2, y2 ) {\r\n\t\treturn ( ( Math.atan2( y2 - y1, x2 - x1 ) * math.RADTODEG ) + 360 ) % 360;\r\n\t},\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tangleDifference: function( angle1, angle2 ) {\r\n\t\t\r\n\t\tlet diff = ( angle2 - angle1 ) % 360;\r\n\t\t\r\n\t\tif ( diff <= -180 ) {\r\n\t\t\tdiff += 360;\r\n\t\t} else if ( diff > 180 ) {\r\n\t\t\tdiff -= 360;\r\n\t\t}\r\n\t\t\r\n\t\treturn diff;\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n\r\n//\r\nexport default math;","/**\r\n * @module input\r\n */\r\n \r\nimport canvas from \"./canvas\";\r\nimport keyValues from \"./keyvalues.js\";\r\n\r\nlet element = document;\r\n\r\n// mouse object\r\nlet __mouse = {\r\n\tpressed: [false, false, false],\r\n\tdown: [false, false, false],\r\n\treleased: [false, false, false],\r\n\twheelUp: false,\r\n\twheelDown: false,\r\n\tx: 0,\r\n\ty: 0\r\n}\r\n\r\n// keboard object\r\nlet __keyboard = {\r\n\tpressed: {},\r\n\tdown: {},\r\n\treleased: {}\r\n}\r\n\r\n// touch object\r\nlet __touch = {\r\n\tstart: [],\r\n\theld: [],\r\n\tmove: [],\r\n\tend: [],\r\n\tcancel: [],\r\n\tx: [],\r\n\ty: []\r\n}\r\n\r\n//\r\nlet __triggerEvents = [];\r\n\r\n//\r\nlet input = {\r\n\t\r\n\ttriggerEvents: __triggerEvents,\r\n\tmouse: __mouse,\r\n\tkeyboard: __keyboard,\r\n\ttouch: __touch,\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tinit: function() {\r\n\t\r\n\t\t// init all input methods\r\n\t\tinput.initMouse();\r\n\t\tinput.initKeyboard();\r\n\t\tinput.initTouch();\r\n\t\t\r\n\t\t// disable context menu\r\n\t\telement.addEventListener(\"contextmenu\", function(e) {\r\n\t\t\te.preventDefault();\r\n\t\t});\r\n\t\r\n\t},\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tinitMouse: function() {\r\n\t\t\r\n\t\t//\r\n\t\tlet handleMouseDown = function(e) {\r\n\t\t\te.preventDefault();\r\n\t\t\tif (!__mouse.pressed[e.button]) window.focus();\r\n\t\t\t__mouse.pressed[e.button] = true;\r\n\t\t\t__mouse.down[e.button] = true;\r\n\t\t}\r\n\t\t\r\n\t\t//\r\n\t\tlet handleMouseUp = function(e) {\r\n\t\t\te.preventDefault();\r\n\t\t\t__mouse.pressed[e.button] = false;\r\n\t\t\t__mouse.released[e.button] = true;\r\n\t\t\t__mouse.down[e.button] = false;\r\n\t\t}\r\n\t\t\r\n\t\t//\r\n\t\tlet handleMouseMove = function(e) {\r\n\t\t\tlet canv = canvas.main.domElement;\r\n\t\t\tlet rect = canv.getBoundingClientRect();\r\n\t\t\t__mouse.x = e.clientX - rect.left;\r\n\t\t\t__mouse.y = e.clientY - rect.top;\r\n\t\t}\r\n\t\t\r\n\t\t//\r\n\t\tlet handleMouseWheel = function(e) {\r\n\t\t\te.preventDefault();\r\n\t\t\tlet delta = Math.max(-1, Math.min(1, e.wheelDelta));\r\n\t\t\t__mouse.wheelUp = delta > 0;\r\n\t\t\t__mouse.wheelDown = delta < 0;\r\n\t\t}\r\n\t\t\r\n\t\t//\r\n\t\telement.addEventListener(\"mousedown\", handleMouseDown);\r\n\t\telement.addEventListener(\"mouseup\", handleMouseUp);\r\n\t\telement.addEventListener(\"mousemove\", handleMouseMove);\r\n\t\telement.addEventListener(\"mousewheel\", handleMouseWheel);\r\n\t},\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tinitKeyboard: function() {\r\n\t\t\r\n\t\t//\r\n\t\tkeyValues.forEach(function(key) {\r\n\t\t\t__keyboard.pressed[key] = false;\r\n\t\t\t__keyboard.down[key] = false;\r\n\t\t\t__keyboard.released[key] = false;\r\n\t\t});\r\n\t\t\r\n\t\t//\r\n\t\tlet handleKeyDown = function(e) {\r\n\t\t\te.preventDefault();\r\n\t\t\tconst code = e.code || e.key;\r\n\t\t\tif (!__keyboard.down[code]) {\r\n\t\t\t\t__keyboard.pressed[code] = true;\r\n\t\t\t\t__keyboard.down[code] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t//\r\n\t\tlet handleKeyUp = function(e) {\r\n\t\t\te.preventDefault();\r\n\t\t\tconst code = e.code || e.key;\r\n\t\t\t__keyboard.released[code] = true;\r\n\t\t\t__keyboard.down[code] = false;\r\n\t\t}\r\n\t\t\r\n\t\t//\r\n\t\telement.addEventListener(\"keydown\", handleKeyDown);\r\n\t\telement.addEventListener(\"keyup\", handleKeyUp);\r\n\t},\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tinitTouch: function() {\r\n\t\t\r\n\t\t//\r\n\t\tlet handleTouchStart = function(e) {\r\n\t\t\te.preventDefault();\r\n\t\t\t(!__touch.start[0]) && window.focus();\r\n\t\t\t__touch.start[0] = true;\r\n\t\t\t__touch.held[0] = true;\r\n\t\t}\r\n\t\t\r\n\t\t//\r\n\t\tlet handleTouchEnd = function(e) {\r\n\t\t\te.preventDefault();\r\n\t\t\t__touch.start[0] = false;\r\n\t\t\t__touch.end[0] = true;\r\n\t\t\t__touch.held[0] = false;\r\n\t\t}\r\n\t\t\r\n\t\t//\r\n\t\tlet handleTouchMove = function(e) {\r\n\t\t\te.preventDefault();\r\n\t\t\tlet touches = e.changedTouches;\r\n\t\t\t__touch.x[0] = touches[0].pageX;\r\n\t\t\t__touch.y[0] = touches[0].pageY;\r\n\t\t}\r\n\t\t\r\n\t\t//\r\n\t\telement.addEventListener(\"touchstart\", handleTouchStart);\r\n\t\telement.addEventListener(\"touchend\", handleTouchEnd);\r\n\t\telement.addEventListener(\"touchcancel\", handleTouchEnd);\r\n\t\telement.addEventListener(\"touchmove\", handleTouchMove);\r\n\t},\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tgetTriggerEvents: function() {    \r\n\t\tlet triggers = __triggerEvents;\r\n\t\ttriggers.length = 0;\r\n\t\tObject.keys(__keyboard.down).forEach((key) => {\r\n\t\t\tif (keyValues.includes(key)) {\r\n\t\t\t\tif (__keyboard.down[key]) triggers.push(key);\r\n\t\t\t\tif (__keyboard.pressed[key]) triggers.push(key + \"Pressed\");\r\n\t\t\t\tif (__keyboard.released[key]) triggers.push(key + \"Released\");\r\n\t\t\t} else {\r\n\t\t\t\tconsole.warn( \"input key not supported: \", key );\r\n\t\t\t\tdelete __keyboard.down[key];\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t// mouse events\r\n\t\tlet mouseMap = [\"Left\", \"Middle\", \"Right\"];\r\n\t\tfor(var n=0; n<3; n++) {\r\n\t\t\tif (__mouse.down[n]) triggers.push(mouseMap[n] + \"Down\");\r\n\t\t\tif (__mouse.pressed[n]) triggers.push(mouseMap[n] + \"Pressed\");\r\n\t\t\tif (__mouse.released[n]) triggers.push(mouseMap[n] + \"Released\");\r\n\t\t}\r\n\t\t\r\n\t\tif (__mouse.wheelUp) triggers.push(\"WheelUp\");\r\n\t\tif (__mouse.wheelDown) triggers.push(\"WheelDown\");\r\n\t\t\r\n\t},\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tupdate: function() {\r\n\t\t\r\n\t\tObject.keys(__keyboard.down).forEach( key => {\r\n\t\t\t__keyboard.pressed[key] = false;\r\n\t\t\t__keyboard.released[key] = false;\r\n\t\t});\r\n\r\n\t\tObject.keys(__mouse.down).forEach( button => {\r\n\t\t\t__mouse.pressed[button] = false;\r\n\t\t\t__mouse.released[button] = false;\r\n\t\t});\r\n\t\t\r\n\t\tObject.keys(__touch.held).forEach( button => {\r\n\t\t\t__touch.start[button] = false;\r\n\t\t\t__touch.end[button] = false;\r\n\t\t\t__touch.held[button] = false;\r\n\t\t});\r\n\t\t\r\n\t\t__mouse.wheelUp = false;\r\n\t\t__mouse.wheelDown = false;\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n\r\n//\r\nexport default input;\r\n","/**\r\n * @author Jack Oatley\r\n */\r\nexport default class Generator {\r\n\t\r\n\t/**\r\n\t * If class has a static \"get\" method it is used in functions created from\r\n\t * prototype methods. If there is a \"get\" method on the prototype it is not\r\n\t * used in the created functions, however it will overide the static \"get\"\r\n\t * method. If there is both a static \"get\" method and a \"get\" method on the\r\n\t * prototype, the static one is used in created functions and remains so,\r\n\t * but the static method on the class is still overwritten.\r\n\t * @param {function} c Constructor function.\r\n\t */\r\n\tstatic classStaticMatch(c) {\r\n\t\tc.create = Generator.functionFromConstructor(c);\r\n\t\tconst get = c.get;\r\n\t\tfor (var m in c.prototype) {\r\n\t\t\tc[m] = Generator.functionFromMethod(c.prototype[m], get);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {function} c Constructor function.\r\n\t */\r\n\tstatic functionFromConstructor(c) {\r\n\t\treturn (...a) => new c(...a);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {function} m Prototype method.\r\n\t * @param {function} [get] Optional get function (static on the constructor.)\r\n\t */\r\n\tstatic functionFromMethod(m, get) {\r\n\t\tif (get)\r\n\t\t\treturn (s, ...a) => m.call(get(s), ...a);\r\n\t\telse\r\n\t\t\treturn (...a) => m.call(...a);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {array} a An array of instances of constructor with the following method.\r\n\t * @param {function} m The method to execute for each instance in the array.\r\n\t */\r\n\tstatic arrayExecute(a, m) {\r\n\t\treturn (...p) => a.forEach(i => m.call(i, ...p));\r\n\t}\r\n\t\r\n}","import draw from \"./draw.js\";\r\nimport Generator from \"./generator\";\r\n\r\n/**\r\n *\r\n */\r\nexport default class Canvas {\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tconstructor(opts = {}) {\r\n\t\tconst c = document.createElement(\"CANVAS\");\r\n\t\tconst ctx = c.getContext(\"2d\");\r\n\t\tthis.domElement = c;\r\n\t\t\r\n\t\t//\r\n\t\tc.width = opts.width || 300;\r\n\t\tc.height = opts.height || 150;\r\n\t\tc.scale = opts.scale || 1;\r\n\t\tc.application = opts.application || false;\r\n\t\t\r\n\t\t//\r\n\t\tif (opts.crisp2D) {\r\n\t\t\tctx.imageSmoothingEnabled = false;\r\n\t\t}\r\n\t\t\r\n\t\t//\r\n\t\tif (c.application) {\r\n\t\t\tdraw.setTarget(this);\r\n\t\t\tCanvas.setMain(this);\r\n\t\t}\r\n\t\t\r\n\t\t//\r\n\t\tc.oncontextmenu = (e) => e.preventDefault();\r\n\t\t\r\n\t\t//\r\n\t\tCanvas.array.push(this);\r\n\t}\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tsetMain() {\r\n\t\tlet c = this.domElement;\r\n\t\tCanvas.main = this;\r\n\t\tif (Canvas.dom === null) {\r\n\t\t\tCanvas.dom = c;\r\n\t\t\tvar el = document.getElementById(\"gbgamebox\") || document.body;\r\n\t\t\tconsole.log(this, c);\r\n\t\t\tel.appendChild(c);\r\n\t\t}\r\n\t\r\n\t}\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tstatic getMain() {\r\n\t\treturn Canvas.main;\r\n\t}\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tfill(color) {\r\n\t\tlet c = this.domElement;\r\n\t\tvar ctx = c.getContext( \"2d\" );\r\n\t\tctx.fillStyle = color || \"#000000\";\r\n\t\tctx.fillRect( 0, 0, c.width / c.scale, c.height / c.scale );\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tclear() {\r\n\t\tvar c = this.domElement;\r\n\t\tvar ctx = c.getContext(\"2d\");\r\n\t\tctx.clearRect(0, 0, c.width / c.scale, c.height / c.scale);\r\n\t}\r\n\r\n}\r\n\r\nGenerator.classStaticMatch(Canvas);\r\nCanvas.array = [];\r\nCanvas.main = null;\r\nCanvas.dom = null;\r\n\r\n/*\r\n//\r\nlet canvas = {\r\n\t\r\n\t//\r\n\tarray: [],\r\n\tmain: null,\r\n\tdom: null,\r\n\r\n\r\n\tcreate: function(opts = {}) {\r\n\t\t\r\n\t\t//\r\n\t\tlet c = document.createElement(\"CANVAS\");\r\n\t\tlet ctx = c.getContext(\"2d\");\r\n\t\tcanvas.array.push( c );\r\n\t\t\r\n\t\t//\r\n\t\tc.width = opts.width || 300;\r\n\t\tc.height = opts.height || 150;\r\n\t\tc.scale = opts.scale || 1;\r\n\t\tc.application = opts.application || false;\r\n\t\t\r\n\t\t//\r\n\t\tif (opts.crisp2D) {\r\n\t\t\tctx.imageSmoothingEnabled = false;\r\n\t\t}\r\n\t\t\r\n\t\t//\r\n\t\tif ( c.application ) {\r\n\t\t\tdraw.setTarget( c );\r\n\t\t\tcanvas.setMain( c );\r\n\t\t}\r\n\t\t\r\n\t\t//\r\n\t\tc.oncontextmenu = function( e ){\r\n\t\t\te.preventDefault()\r\n\t\t}\r\n\t\t\r\n\t\t//\r\n\t\treturn c;\r\n\t},\r\n\r\n\r\n\tsetMain: function(c) {\r\n\t\r\n\t\tcanvas.main = c;\r\n\t\tif ( canvas.dom === null ) {\r\n\t\t\tcanvas.dom = c;\r\n\t\t\tvar el = document.getElementById(\"gbgamebox\") || document.body;\r\n\t\t\tel.appendChild( c );\r\n\t\t}\r\n\t\r\n\t},\r\n\t\r\n\r\n\tgetMain: function() {\r\n\t\treturn canvas.main;\r\n\t},\r\n\t\r\n\r\n\tfill: function(c, color) {\r\n\t\tvar ctx = c.getContext( \"2d\" );\r\n\t\tctx.fillStyle = color || \"#000000\";\r\n\t\tctx.fillRect( 0, 0, c.width / c.scale, c.height / c.scale );\r\n\t},\r\n\r\n\r\n\tclear: function(c) {\r\n\t\tvar ctx = c.getContext(\"2d\");\r\n\t\tctx.clearRect(0, 0, c.width / c.scale, c.height / c.scale);\r\n\t}\r\n\t\r\n}\r\n\r\n//\r\nexport default canvas;*/\r\n","\r\nimport draw from \"./draw.js\";\r\n\r\nconst noop = () => {};\r\n\r\nexport default class Transition {\r\n\t\r\n\t/**\r\n\t* @param {object} opts Options.\r\n\t* @param {string} opts.type\r\n\t* @param {string} opts.time Time in steps the tranistion will last per stage (in/out).\r\n\t* @param {string} opts.color Color of the transition.\r\n\t* @param {string} opts.callback Function to execute mid-transition.\r\n\t*/\r\n\tconstructor(opts = {}) {\r\n\t\tthis.type = opts.type || \"fade\";\r\n\t\tthis.time = opts.time || 60;\r\n\t\tthis.color = opts.color || \"#000000\";\r\n\t\tthis.callback = opts.callback || noop;\r\n\t\tif (opts.prefab) Object.assign(this, opts.prefab);\r\n\t\tthis.direction = 1;\r\n\t\tthis.alpha = 0;\r\n\t\tthis.delta = 1/this.time;\r\n\t\tTransition.allInstances.push(this);\r\n\t\t\r\n\t\t// Check transition type exists and log warning otherwise\r\n\t\tif (!Transition.prefabs.hasOwnProperty(this.type)) {\r\n\t\t\twindow.addConsoleText(\"#F00\", \"Unknown transition type: \" + this.type);\r\n\t\t\tthis.type = \"fade\";\r\n\t\t}\r\n\t}\r\n\t\r\n\t/** */\r\n\tupdate() {\r\n\t\tif (Transition.prefabs.hasOwnProperty(this.type))\r\n\t\t\tTransition.prefabs[this.type].update.call(this);\r\n\t}\r\n\t\r\n\t/** */\r\n\tdraw() {\r\n\t\tif (Transition.prefabs.hasOwnProperty(this.type))\r\n\t\t\tTransition.prefabs[this.type].draw.call(this);\r\n\t}\r\n\t\r\n\t/** */\r\n\tdestroy() {\r\n\t\tlet x = Transition.allInstances.indexOf(this);\r\n\t\tTransition.allInstances.splice(x, 1);\r\n\t}\r\n\t\r\n\t/** */\r\n\tstatic create(opts) {\r\n\t\treturn new Transition(opts);\r\n\t}\r\n\t\r\n\t/** */\r\n\tstatic updateAll() {\r\n\t\tTransition.allInstances.forEach((t) => {\r\n\t\t\tt.update();\r\n\t\t});\r\n\t}\r\n\t\r\n\t/** */\r\n\tstatic drawAll() {\r\n\t\tTransition.allInstances.forEach((t) => {\r\n\t\t\tt.draw();\r\n\t\t});\r\n\t}\r\n\t\r\n}\r\n\r\n//\r\nTransition.allInstances = [];\r\n\r\n/**\r\n * @namespace\r\n */\r\nTransition.prefabs = {\r\n\r\n\t\"fade\": {\r\n\t\tupdate: function() {\r\n\t\t\tthis.alpha += this.direction ? this.delta : -this.delta;\r\n\t\t\tif (this.alpha >= 1) {\r\n\t\t\t\tthis.callback();\r\n\t\t\t\tthis.direction = 0;\r\n\t\t\t} else if (this.alpha <= 0) {\r\n\t\t\t\tthis.destroy();\r\n\t\t\t\tconsole.log(\"destroy\");\r\n\t\t\t}\r\n\t\t},\r\n\t\tdraw: function() {\r\n\t\t\tvar canvas = draw.getTarget();\r\n\t\t\tvar ctx = canvas.getContext(\"2d\");\r\n\t\t\tctx.globalAlpha = this.alpha;\r\n\t\t\tctx.fillStyle = this.color;\r\n\t\t\tctx.fillRect(0, 0, 9999999, 9999999);\r\n\t\t}\r\n\t}\r\n\r\n}","import Pool from \"../utils/pool.js\";\r\nimport Generator from \"../generator.js\";\r\n\r\n/**\r\n * @author Jack Oatley\r\n */\r\nexport default class Grid {\r\n\r\n\t/**\r\n\t * @param {number} Initial width of the grid.\r\n\t * @param {number} Initial height of the grid\r\n\t * @param {object} [opts={}] Options object.\r\n\t * @param {*} [opts.value=0] Initial value for each cell of the grid.\r\n\t */\r\n\tconstructor(width, height, opts = {}) {\r\n\t\tlet myGrid = Grid.pool.get(this);\r\n\t\tmyGrid.size = width * height;\r\n\t\tmyGrid.data = (myGrid === this) ? [] : myGrid.data;\r\n\t\tmyGrid.data.length = myGrid.size;\r\n\t\tmyGrid.width = width;\r\n\t\tmyGrid.height = height;\r\n\t\tmyGrid.clear(opts.value || 0);\r\n\t\treturn myGrid;\r\n\t}\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tget(x, y) {\r\n\t\treturn this.data[x + y * this.width];\r\n\t}\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tset(x, y, value) {\r\n\t\tthis.data[x + y * this.width] = value;\r\n\t}\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tadd(x, y, value) {\r\n\t\tthis.data[x + y * this.width] += value;\r\n\t}\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tmultiply(x, y, value) {\r\n\t\tthis.data[x + y * this.width] *= value;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Clears all cells in the grid to the given value.\r\n\t * @param {*} value Value to clear the grid to.\r\n\t */\r\n\tclear(value) {\r\n\t\tthis.data.fill(value);\r\n\t}\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tdestroy() {\r\n\t\tGrid.pool.release(this);\r\n\t}\r\n\r\n}\r\n\r\n//\r\nGrid.pool = new Pool(Grid);\r\nGenerator.classStaticMatch(Grid);","import Generator from \"./generator.js\";\r\n\r\n/**\r\n * @author Jack Oatley\r\n */\r\nexport default class Sound {\r\n\r\n\t/**\r\n\t * @param {string} String name for the resource.\r\n\t * @param {string} A path to an audio source, or a base64 encoded audio.\r\n\t */\r\n\tconstructor(name, source) {\r\n\t\tthis.name = name;\r\n\t\tthis.instances = [new Audio(source)];\r\n\t\tthis.ready = false;\r\n\t\tSound.names.push(name);\r\n\t\tSound.array.push(this);\r\n\t\tlet test = this.instances[0];\r\n\t\ttest.oncanplaythrough = () => {\r\n\t\t\tthis.ready = true;\r\n\t\t\ttest.oncanplaythrough = null;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {object} [opts={}] object.\r\n\t */\r\n\tplay(opts = {}) {\r\n\t\tif (Sound.isEnabled) {\r\n\t\t\t\r\n\t\t\t// find an existing sound instance to play\r\n\t\t\tlet playSound;\r\n\t\t\tfor (var i=0, n=this.instances.length; i<n; i++) {\r\n\t\t\t\tlet instance = this.instances[i];\r\n\t\t\t\tif (instance.paused) {\r\n\t\t\t\t\tplaySound = instance;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// create new instance of sound\r\n\t\t\tif (!playSound) {\r\n\t\t\t\tplaySound = this.instances[0].cloneNode();\r\n\t\t\t\tthis.instances.push(playSound);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//\r\n\t\t\tplaySound.onError = (err) => {\r\n\t\t\t\tconsole.error(soundName, err);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// play the sound\r\n\t\t\tlet promise = playSound.play();\r\n\t\t\tif ( promise !== undefined ) {\r\n\t\t\t\tpromise.then( function() {\r\n\t\t\t\t\t\r\n\t\t\t\t\t// on end event\r\n\t\t\t\t\tplaySound.onended = function() {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// internal event stuff\r\n\t\t\t\t\t\t( ( Number( opts.loop || false ) )\r\n\t\t\t\t\t\t\t? _loop : _end ).call( this );\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// and custom event, if defined\r\n\t\t\t\t\t\tif (opts.onEnd) opts.onEnd();\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t}).catch((err) => {\r\n\t\t\t\t\tconsole.warn(err);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//\r\n\t\t\treturn playSound;\r\n\t\t}\r\n\t\t\r\n\t\t// sound is disabled\r\n\t\treturn null;\r\n\t}\r\n\t\r\n\t/** Stop all instances of the sound from playing. */\r\n\tstop() {\r\n\t\tfor (var i=0, n=this.instances.length; i<n; i++) {\r\n\t\t\tlet instance = this.instances[i];\r\n\t\t\tif (!instance.paused) {\r\n\t\t\t\t_end.call(instance);\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t}\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tstatic readyAll() {\r\n\t\tfor (var i=0, n=Sound.array.length; i<n; i++) {\r\n\t\t\tif (!Sound.array[i].ready) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tstatic enable(x) {\r\n\t\tSound.isEnabled = x;\r\n\t}\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tstatic get(name) {\r\n\t\tif (typeof name === \"object\") return name;\r\n\t\tfor (var i=0, n=Sound.array.length; i<n; i++) {\r\n\t\t\tif (Sound.array[i].name === name) {\r\n\t\t\t\treturn Sound.array[i];\r\n\t\t\t}\r\n\t\t}\r\n\t\twindow.addConsoleText(\"#F00\", \"Unknown sound: \"+ name);\r\n\t\treturn null;\r\n\t}\r\n\t\r\n}\r\n\r\nGenerator.classStaticMatch(Sound);\r\nSound.prototype.assetType = \"sound\";\r\nSound.isEnabled = true;\r\nSound.names = [];\r\nSound.array = [];\r\n\r\n//\r\nfunction _loop() {\r\n\tthis.currentTime = 0;\r\n\tthis.play();\r\n}\r\n\r\n//\r\nfunction _end() {\r\n\tthis.pause();\r\n\tthis.currentTime = 0;\r\n}","import math from \"./math.js\";\r\nimport instance from \"./instance.js\";\r\n \r\n//\r\nlet basic = JSON.stringify({\r\n\tsprite: null,\r\n\tindex: 0,\r\n\timageSpeed: 1,\r\n\tanimationBehavior: \"loop\",\r\n\tvisible: true,\r\n\tsolid: false,\r\n\texists: true,\r\n\tscaleX: 1,\r\n\tscaleY: 1,\r\n\trotation: 0,\r\n\tterminal: 100,\r\n\tgravity: 0,\r\n\tgravityDirection: 0,\r\n\tspeedX: 0,\r\n\tspeedY: 0,\r\n\tboxTop: 0,\r\n\tboxBottom: 0,\r\n\tboxLeft: 0,\r\n\tboxRight: 0,\r\n\tbehaviours: [],\r\n\tlisteners: [],\r\n\tevents: {},\r\n\tboxCollision: {\r\n\t\tx: 0,\r\n\t\ty: 0,\r\n\t\twidth: 0,\r\n\t\theight: 0,\r\n\t\ttop: 0,\r\n\t\tbottom: 0,\r\n\t\tleft: 0,\r\n\t\tright: 0 \r\n\t},\r\n\t_depth: 0\r\n});\r\n \r\n//\r\nlet objectVars = {\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tset: function(proto) {\r\n\t\tObject.assign(proto, JSON.parse(basic));\r\n\t\t\r\n\t\tObject.defineProperty(proto, \"depth\", {\r\n\t\t\tset: function(x) {\r\n\t\t\t\tif (this._depth !== x) {\r\n\t\t\t\t\tthis._depth = x;\r\n\t\t\t\t\tinstance.doDepthSort = true;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tget: function() { return this._depth; }\r\n\t\t});\r\n\t\t\r\n\t\tObject.defineProperty(proto, \"speed\", {\r\n\t\t\tset: function(x) {\r\n\t\t\t\tlet y = this.direction * math.DEGTORAD;\r\n\t\t\t\tthis.speedX = Math.cos(y) * x;\r\n\t\t\t\tthis.speedY = Math.sin(y) * x;\r\n\t\t\t},\r\n\t\t\tget: function( x ) {\r\n\t\t\t\treturn math.pointDistance( 0, 0, this.speedX, this.speedY );\r\n\t\t\t}\r\n\t\t} );\r\n\t\t\r\n\t\tObject.defineProperty(proto, \"direction\", {\r\n\t\t\tset: function(x) {\r\n\t\t\t\tlet y = this.speed;\r\n\t\t\t\tthis.speedX = Math.cos(x * math.DEGTORAD) * y;\r\n\t\t\t\tthis.speedY = Math.sin(x * math.DEGTORAD) * y;\r\n\t\t\t},\r\n\t\t\tget: function( x ) {\r\n\t\t\t\treturn math.pointDirection( 0, 0, this.speedX, this.speedY );\r\n\t\t\t}\r\n\t\t} );\r\n\t\t\t\r\n\t}\r\n\t\r\n}\r\n\r\n//\r\nexport default objectVars;","import event from \"./event.js\";\r\nimport instance from \"./instance.js\";\r\nimport objectVars from \"./objectVars.js\";\r\nimport Pool from \"./utils/pool.js\";\r\n\r\n/**\r\n *\r\n */\r\nexport default class GameObject {\r\n\r\n\t/**\r\n\t * @param {string} name\r\n\t * @param {number} sprite\r\n\t */\r\n\tconstructor(name, sprite) {\r\n\t\tlet obj = function(x, y) {\r\n\t\t\tlet inst = obj.pool.get(this);\r\n\t\t\tinstance.setup(inst, obj, x, y);\r\n\t\t\tobj.instances.push(inst);\r\n\t\t\treturn inst;\r\n\t\t};\r\n\t\tobjectVars.set(obj.prototype);\r\n\t\tobj.objectName = name || \"object_\" + obj.id;\r\n\t\tobj.prototype.sprite = sprite || null;\r\n\t\tobj.pool = new Pool(obj);\r\n\t\tobj.instances = [];\r\n\t\tGameObject.names.push(obj.objectName);\r\n\t\tGameObject.array.push(obj);\r\n\t\treturn obj;\r\n\t}\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tstatic create(...args) {\r\n\t\treturn new GameObject(...args);\r\n\t}\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tstatic set(obj, property, value) {\r\n\t\tobj = GameObject.get(obj);\r\n\t\tobj.prototype[property] = value;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Add an action with variable parameters to an event of an object.\r\n\t * @param object Can be an object constructor or integer ID.\r\n\t * @param event\r\n\t * @param action\r\n\t * @param {...*} args\r\n\t */\r\n\tstatic eventAddAction(obj, event, action, ...args) {\r\n\t\t\r\n\t\tobj = GameObject.get(obj);\r\n\t\t\r\n\t\tif (typeof event === \"object\") {\r\n\t\t\tObject.keys(event).forEach((key) => {\r\n\t\t\t\tevent[key].forEach((params) => {\r\n\t\t\t\t\tGameObject.eventAddAction(obj, key, ...params);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif (action !== undefined) {\r\n\t\t\t\r\n\t\t\t// if flow action, get flow tag\r\n\t\t\tlet flow = \"\";\r\n\t\t\tif (typeof action === \"string\")\r\n\t\t\t\tflow = action;\r\n\t\t\t\r\n\t\t\t// create a new event if not yet defined\r\n\t\t\tif (!obj.prototype.events[event]) {\r\n\t\t\t\tobj.prototype.events[event] = [];\r\n\t\t\t\tif (event.includes(\"collision_\")) {\r\n\t\t\t\t\tlet index = event.indexOf(\"_\") + 1;\r\n\t\t\t\t\tlet name = event.slice(index, 200);\r\n\t\t\t\t\tGameObject.addCollisionListener(obj, name);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// add action data to event\r\n\t\t\tobj.prototype.events[event].push({\r\n\t\t\t\tflow: flow,\r\n\t\t\t\taction: action,\r\n\t\t\t\targs: args\r\n\t\t\t});\r\n\t\t\t\r\n\t\t} else {\r\n\t\t\tconsole.warn(\"tried to add an undefined action to an event!\");\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tstatic addCollisionListener(obj, target) {\r\n\t\tobj.prototype.listeners.push({\r\n\t\t\ttype: \"collision\",\r\n\t\t\ttarget: target\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tstatic getAllInstances(obj) {\r\n\t\tlet arr = [];\r\n\t\tinstance.instanceArray.forEach(instance => {\r\n\t\t\tlet name = instance.constructor.objectName;\r\n\t\t\tif (name === obj)\r\n\t\t\t\tarr.push(instance);\r\n\t\t});\r\n\t\treturn arr;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number}\r\n\t */\r\n\tstatic get(value) {\r\n\t\t\r\n\t\tif (typeof value === \"object\" || typeof value === \"function\")\r\n\t\t\treturn value;\r\n\t\t\r\n\t\tfor (var n = 0; n < GameObject.array.length; n++)\r\n\t\t\tif (GameObject.array[n].objectName === value)\r\n\t\t\t\treturn GameObject.array[n];\r\n\t\t\t\r\n\t\tconsole.warn(\"FAIL: \", typeof value, value);\r\n\t\treturn null;\r\n\t\t\r\n\t}\r\n\r\n}\r\n\r\nGameObject.prototype.assetType = \"object\";\r\nGameObject.names = [];\r\nGameObject.array = [];\r\n","/**\r\n * @module keyvalues\r\n */\r\n \r\nlet values = [\r\n\t\"ArrowUp\",\r\n\t\"ArrowDown\",\r\n\t\"ArrowLeft\",\r\n\t\"ArrowRight\",\r\n\t\"Enter\",\r\n\t\"Space\",\r\n\t\"Backspace\",\r\n\t\"Escape\",\r\n\t\"ShiftLeft\",\r\n\t\"ShiftRight\",\r\n\t\"ControlLeft\",\r\n\t\"ControlRight\",\r\n\t\"AltLeft\",\r\n\t\"AltRight\",\r\n\t\"KeyA\",\r\n\t\"KeyB\",\r\n\t\"KeyC\",\r\n\t\"KeyD\",\r\n\t\"KeyE\",\r\n\t\"KeyF\",\r\n\t\"KeyG\",\r\n\t\"KeyH\",\r\n\t\"KeyI\",\r\n\t\"KeyJ\",\r\n\t\"KeyK\",\r\n\t\"KeyL\",\r\n\t\"KeyM\",\r\n\t\"KeyN\",\r\n\t\"KeyO\",\r\n\t\"KeyP\",\r\n\t\"KeyQ\",\r\n\t\"KeyR\",\r\n\t\"KeyS\",\r\n\t\"KeyT\",\r\n\t\"KeyU\",\r\n\t\"KeyV\",\r\n\t\"KeyW\",\r\n\t\"KeyZ\",\r\n\t\"KeyY\",\r\n\t\"KeyZ\",\r\n];\r\n\r\nexport default values;\r\n","import room from \"./room.js\";\r\nimport draw from \"./draw.js\";\r\nimport Generator from \"./generator.js\";\r\n\r\n/**\r\n * @author Jack Oatley\r\n */\r\nexport default class Camera {\r\n\t\r\n\t/**\r\n\t * Create a new Camera instance.\r\n\t * @param {object} [opts={}]\r\n\t * @param {number} [x]\r\n\t * @param {number} [y]\r\n\t * @param {number} [angle]\r\n\t * @param {number} [width]\r\n\t * @param {number} [height]\r\n\t * @param {number} [follow]\r\n\t * @param {number} [gridLocked]\r\n\t */\r\n\tconstructor(opts = {}) {\r\n\t\tthis.x = 0,\r\n\t\tthis.y = 0,\r\n\t\tthis.angle = 0,\r\n\t\tthis.width = room.current.width,\r\n\t\tthis.height = room.current.height,\r\n\t\tthis.follow = null,\r\n\t\tthis.gridLocked = false,\r\n\t\tthis.left = 0,\r\n\t\tthis.right = 0,\r\n\t\tthis.top = 0,\r\n\t\tthis.bottom = 0\r\n\t\tObject.assign(this, opts);\r\n\t\tCamera.array.push(this);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Update the Camera.\r\n\t */\r\n\tupdate() {\r\n\t\tif (this.follow) {\r\n\t\t\t\r\n\t\t\t// if single instance, put into array\r\n\t\t\tif (!Array.isArray(this.follow))\r\n\t\t\t\tthis.follow = [this.follow];\r\n\t\t\t\r\n\t\t\t//\r\n\t\t\tlet x = 0, y = 0, count = 0, weight = 1;\r\n\t\t\tthis.follow.forEach((inst) => {\r\n\t\t\t\t\r\n\t\t\t\tif (Array.isArray(inst)) {\r\n\t\t\t\t\tweight = inst[1] || 1;\r\n\t\t\t\t\tinst = inst[0];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tweight = 1;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tx += inst.x * weight;\r\n\t\t\t\ty += inst.y * weight;\r\n\t\t\t\tcount += weight;\r\n\t\t\t\t\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tthis.x = x / count;\r\n\t\t\tthis.y = y / count;\r\n\t\t}\r\n\t\t\r\n\t\t// update bounds\r\n\t\tthis.left = this.x - this.width * 0.5;\r\n\t\tthis.right = this.x + this.width * 0.5;\r\n\t\tthis.top = this.y - this.height * 0.5;\r\n\t\tthis.bottom = this.y + this.height * 0.5;\r\n\t\t\r\n\t\t// apply camera\r\n\t\tdraw.transform.translate(-this.left, -this.top);\r\n\t}\r\n\r\n}\r\n\r\nCamera.array = [];\r\n\r\nCamera.create = Generator.functionFromConstructor(Camera);\r\nCamera.updateAll = Generator.arrayExecute(Camera.array, Camera.prototype.update);","\r\nlet global = {\r\n\tfps: 0\r\n}\r\n\r\nexport default global;","import canvas from \"./canvas\";\r\nimport room from \"./room\";\r\nimport input from \"./input\";\r\nimport instance from \"./instance\";\r\nimport global from \"./global\";\r\nimport draw from \"./draw\";\r\nimport Camera from \"./camera\";\r\nimport Transition from \"./transition\";\r\n\r\nlet lastTick = performance.now(),\r\n\ttickLength = 1000 / 60,\r\n\tdt = 0,\r\n\tlast = 0;\r\n\t\r\n//\r\nlet main = {\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tget dt() {\r\n\t\treturn dt;\r\n\t},\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tstart: function(opts = {}) {\r\n\t\t\r\n\t\t// Basic site-locking\r\n\t\tif (opts.host !== undefined && opts.host !== \"\") {\r\n\t\t\tlet loc = (window.parent) ? window.parent.location : window.location;\r\n\t\t\tlet host = loc.hostname;\r\n\t\t\tlet arr = opts.host.split(\" \").join(\"\").split(\",\");\r\n\t\t\tif (!opts.host.includes(host))\r\n\t\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\t//\r\n\t\tlet canv = canvas.create({\r\n\t\t\twidth: room.current.width,\r\n\t\t\theight: room.current.height,\r\n\t\t\tcrisp2D: true,\r\n\t\t\tapplication: true\r\n\t\t});\r\n\t\t\r\n\t\t// selectively enable input methods\r\n\t\tif (opts.enableMouse) input.initMouse();\r\n\t\tif (opts.enableKeyboard) input.initKeyboard();\r\n\t\tif (opts.enableTouch) input.initTouch();\r\n\t\tif (opts.hideCursor) canv.style.cursor = \"none\";\r\n\t\t\r\n\t\t//\r\n\t\troom.enter(room.current);\r\n\t\ttick(performance.now());\r\n\t\t\r\n\t},\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tsetGameSpeed: function( speed ) {\r\n\t\ttickLength = 1000 / speed;\r\n\t}\r\n\t\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction tick( timestamp ) {\r\n\t\r\n\t// exit game with Esc key\r\n\tif ( window._GB_stop && input.triggerEvents.includes(\"EscapePressed\") )\r\n\t\twindow._GB_stop();\r\n\t\r\n\t// request the next frame\r\n\twindow.requestAnimationFrame( tick );\r\n\tlet nextTick = lastTick + tickLength;\r\n\tlet numTicks = 0;\r\n\tglobal.fps = 1000 / (timestamp - last);\r\n\tlast = timestamp;\r\n\r\n\t//\r\n\tif ( timestamp > nextTick ) {\r\n\t\tlet timeSinceTick = timestamp - lastTick;\r\n\t\tnumTicks = Math.floor( timeSinceTick / tickLength );\r\n\t}\r\n\t\r\n\t//\r\n\tinput.getTriggerEvents();\r\n\tqueueUpdates(numTicks);\r\n\tgameDraw();\r\n\t\r\n\t//\r\n\tif ( numTicks ) {\r\n\t\tinput.update();\r\n\t}\r\n\t\r\n}\r\n\r\n/**\r\n * @param {number} ticks\r\n */\r\nfunction queueUpdates(ticks) {\r\n\tlet i;\r\n\tfor(i=0; i<ticks; i++) {\r\n\t\tlastTick = lastTick + tickLength;\r\n\t\tdt = 1;\r\n\t\tgameUpdate(1);\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {number} dt Delta Time.\r\n */\r\nfunction gameUpdate(dt) {\r\n\tinstance.stepAll(dt);\r\n\tinstance.clearDestroyed();\r\n\tTransition.updateAll();\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction gameDraw() {\r\n\tdraw.reset();\r\n\tcanvas.fill(canvas.main, \"#000000\");\r\n\troom.draw(room.current);\r\n\tCamera.updateAll();\r\n\tinstance.drawAll();\r\n\tTransition.drawAll();\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction handleResizeEvent() {\r\n\tinstance.executeEventAll(\"resize\");\r\n}\r\n\r\n// attach event listerners\r\nwindow.addEventListener(\"resize\", handleResizeEvent);\r\n\r\n//\r\nexport default main;\r\n","\r\n//\r\nlet tween = {\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tblend( n1 , n2 , perc ) {\r\n\t\tlet diff = n2 - n1;\r\n\t\treturn n1 + ( diff * perc );\r\n\t},\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tcubicBezier( x2, y2, x3, y3, i ) {\r\n\t\t\r\n\t\tlet x1 = 0,\r\n\t\t\ty1 = 0,\r\n\t\t\tx4 = 1,\r\n\t\t\ty4 = 1;\r\n\t\t\r\n\t\t // The Green Lines\r\n\t\tlet xa = tween.blend( x1 , x2 , i ),\r\n\t\t\tya = tween.blend( y1 , y2 , i ),\r\n\t\t\txb = tween.blend( x2 , x3 , i ),\r\n\t\t\tyb = tween.blend( y2 , y3 , i ),\r\n\t\t\txc = tween.blend( x3 , x4 , i ),\r\n\t\t\tyc = tween.blend( y3 , y4 , i ),\r\n\r\n\t\t\t// The Blue Line\r\n\t\t\txm = tween.blend( xa , xb , i ),\r\n\t\t\tym = tween.blend( ya , yb , i ),\r\n\t\t\txn = tween.blend( xb , xc , i ),\r\n\t\t\tyn = tween.blend( yb , yc , i ),\r\n\r\n\t\t\t// The Black Dot\r\n\t\t\tx = tween.blend( xm , xn , i ),\r\n\t\t\ty = tween.blend( ym , yn , i );\r\n\t\t\r\n\t\t//\r\n\t\treturn y;\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n\r\n//\r\nexport default tween;","import Generator from \"./generator\";\r\nimport Grid from \"./data/grid\";\r\n\r\n/**\r\n * @author Jack Oatley\r\n */\r\nexport default class Font {\r\n\r\n\t/**\r\n\t * @param {object} [opts={}] Options.\r\n\t * @param {string} [opts.name=\"_UNNAMEDFONT\"] Name of the font.\r\n\t * @param {string} [opts.src=\"\"] Source of the font.\r\n\t * @param {image} [opts.bitmap=null] An existing bitmap.\r\n\t * @param {string} [opts.method=\"normal\"] Initial drawing method.\r\n\t * @param {boolean} [opts.apply] Apply the font in CSS,\r\n\t */\r\n\tconstructor(opts = {}) {\r\n\t\tthis.name = opts.name || \"_UNNAMEDFONT\";\r\n\t\tthis.source = opts.src || \"\";\r\n\t\tthis.hasFontFace = false;\r\n\t\tthis.bitmapFont = opts.bitmap || null;\r\n\t\tthis.hasBitmapFont = this.bitmap !== null;\r\n\t\tthis.method = opts.method || \"normal\";\r\n\t\tif (opts.apply) this.applyCss();\r\n\t\tFont.names.push(this.name);\r\n\t\tFont.array.push(this);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns the CSS code that's needed to be applied to the page to use this font in the DOM or on the canvas.\r\n\t */\r\n\tgetCss() {\r\n\t\treturn \"@font-face {\\\r\n\t\t\tfont-family: \" + this.name + \";\\\r\n\t\t\tsrc: url('\" + this.source + \"') format('truetype');\\\r\n\t\t}\";\r\n\t}\r\n\t\r\n\t/**\r\n\t * Applies the CSS code.\r\n\t */\r\n\tapplyCss() {\r\n\t\tlet style = document.createElement(\"STYLE\");\r\n\t\tstyle.textContent = this.getCss()\r\n\t\tdocument.head.appendChild(style);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {object} [opts={}] Options object.\r\n\t * @param {number} [opts.size=8] Size of the font.\r\n\t * @param {string} [opts.map] A string of all the characters to include in the bitmap font.\r\n\t * @param {int} [opts.alphaThreshold=150] Threshold that dertmines which pixels shall be visible.\r\n\t * @param {array} [opts.color=[0,0,0,255]] An array containing the RGBA channels respectively.\r\n\t */\r\n\tconvertToBitmapFont(opts = {}) {\r\n\t\t\r\n\t\tconst scale = 3;\r\n\t\tconst size = (opts.size || 8) * scale;\r\n\t\tconst map = opts.map || \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n\t\tconst cx = size * 0.5;\r\n\t\tconst cy = cx;\r\n\t\tconst alphaThreshold = opts.alphaThreshold || 150;\r\n\t\tconst color = opts.color || [0, 0, 0, 255];\r\n\t\t\r\n\t\tconst atlas = document.createElement(\"CANVAS\");\r\n\t\tatlas.width = (size /scale) * map.length;\r\n\t\tatlas.height = (size / scale);\r\n\t\tconst atlasCtx = atlas.getContext(\"2d\");\r\n\t\tconst pointImageData = atlasCtx.createImageData(1, 1);\r\n\t\tpointImageData.data.set(color, 0);\r\n\t\t\r\n\t\tconst canvas = document.createElement(\"CANVAS\");\r\n\t\tcanvas.width = canvas.height = size;\r\n\t\t\r\n\t\tlet ctx = canvas.getContext(\"2d\");\r\n\t\tctx.font = size + \"px \" + this.name;\r\n\t\tconsole.log(ctx.font);\r\n\t\tctx.textAlign = \"center\";\r\n\t\tctx.textBaseline = \"middle\"; \r\n\t\t\r\n\t\tlet charMap = new Grid(size/scale, size/scale);\r\n\t\tlet lookupTable = {};\r\n\t\tfor (var n=0; n<map.length; n++) {\r\n\t\t\t\r\n\t\t\tctx.clearRect(0, 0, size, size);\r\n\t\t\tcharMap.clear(-1);\r\n\t\t\t\r\n\t\t\tlet c = map[n];\r\n\t\t\tctx.fillStyle = \"#000000\";\r\n\t\t\tctx.fillText(c, cx, cy);\r\n\t\t\t\r\n\t\t\tlet imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n\t\t\tlet data = imageData.data;\r\n\t\t\tvar p, r, g, b, a;\r\n\t\t\tfor (p=0; p<data.length; p+=4) {\r\n\t\t\t\tlet x = ~~(((p/4) % size) / scale);\r\n\t\t\t\tlet y = ~~((~~((p/4) / size)) / scale);\r\n\t\t\t\tlet i = x+(size/scale)*y;\r\n\t\t\t\tif (charMap.get(x, y) === -1) charMap.set(x, y, data[p+3]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Get metrics\r\n\t\t\tlet metrics = { left: 100, top: 100, right: 0, bottom: 0 };\r\n\t\t\tlet minY = 100;\r\n\t\t\tlet maxY = 0;\r\n\t\t\tlet x, y;\r\n\t\t\tfor (y=0; y<size/scale; y++)\r\n\t\t\tfor (x=0; x<size/scale; x++) {\r\n\t\t\t\tif (charMap.get(x, y) > alphaThreshold) {\r\n\t\t\t\t\tmetrics.left = Math.min(metrics.left, x);\r\n\t\t\t\t\tmetrics.top = Math.min(metrics.top, y);\r\n\t\t\t\t\tmetrics.right = Math.max(metrics.right, x+1);\r\n\t\t\t\t\tmetrics.bottom = Math.max(metrics.bottom, y+1);\r\n\t\t\t\t\tminY = Math.min(minY, metrics.top);\r\n\t\t\t\t\tmaxY = Math.max(maxY, metrics.bottom);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Print to atlas\r\n\t\t\tfor (y=0; y<size/scale; y++)\r\n\t\t\tfor (x=0; x<size/scale; x++) {\r\n\t\t\t\tif (charMap.get(x, y) > alphaThreshold) {\r\n\t\t\t\t\tatlasCtx.putImageData(pointImageData, n*(size/scale)+x, y);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Tweak metrics into atlas coords and add to lookup table\r\n\t\t\tmetrics.left += n*(size/scale);\r\n\t\t\tmetrics.right += n*(size/scale);\r\n\t\t\tmetrics.top = 0;\r\n\t\t\tmetrics.bottom = size/scale;\r\n\t\t\tlookupTable[c] = metrics;\r\n\t\t}\r\n\t\t\r\n\t\t//var link = document.createElement('a');\r\n\t\t//link.download = 'filename.png';\r\n\t\t//link.href = atlas.toDataURL()\r\n\t\t//link.click();\r\n\t\t\r\n\t\t// Space is special because it can't actually be measured\r\n\t\tlookupTable[\" \"] = {left: -3, top: 0, right: 0, bottom: size/scale}\r\n\t\t\r\n\t\tthis.bitmapFont = {\r\n\t\t\tsize: size/scale,\r\n\t\t\tlookup: lookupTable,\r\n\t\t\timage: atlas\r\n\t\t}\r\n\t\t\r\n\t\tthis.method = \"bitmap\";\r\n\t\tconsole.log(this.bitmapFont);\r\n\t\t\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {*} value The string name of the font to get.\r\n\t */\r\n\tstatic get(value) {\r\n\t\t\r\n\t\tif ([\"object\", \"function\"].includes(typeof value))\r\n\t\tif (typeof value === \"object\" || typeof value === \"function\")\r\n\t\t\treturn value;\r\n\t\t\r\n\t\tfor (var n = 0; n < Font.array.length; n++)\r\n\t\t\tif (Font.array[n].name === value)\r\n\t\t\t\treturn Font.array[n];\r\n\t\t\r\n\t\treturn null;\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n\r\nGenerator.classStaticMatch(Font);\r\nFont.prototype.assetType = \"font\";\r\nFont.names = [];\r\nFont.array = [];","import canvas from \"./canvas.js\";\r\n \r\n/**\r\n *\r\n */\r\nexport default class App {\r\n\t\r\n\t/**\r\n\t * Sets the cursor to use when the mouse is in the game window.\r\n\t * @param {string} cursor Same as the CSS cursor property.\r\n\t * See {@link https://developer.mozilla.org/en-US/docs/Web/CSS/cursor}\r\n\t */\r\n\tstatic setCursor(cursor) {\r\n\t\tcanvas.main.style.cursor = cursor;\r\n\t}\r\n\t\r\n}","/**\r\n * @module Pool\r\n */\r\n\r\n/**\r\n * The Pool object contains an array (the pool) called stack to which we can give objects. The Pool also maintains it's own length property, as the true length of the stack array does not change, so as to avoid garbage collection.\r\n * @param {Object} newConstructor The constructor function for this pool. During get, if no items are in the pool and no default value is provided, a new object is created from this constructor and returned.\r\n */\r\nexport default function Pool(newConstructor) {\r\n\tthis.stack = [];\r\n\tthis.length = 0;\r\n\tthis.newConstructor = newConstructor;\r\n}\r\n\r\n/**\r\n * @param {Object} [def] The default object (or even value) to return if no items are found in the pool. If this is not defined, and no items are found in the pool, then a new object is created as per the Pool's newConstructor property.\r\n */\r\nPool.prototype.get = function(def) {\r\n\tif (this.length) {\r\n\t\tdef = this.stack[--this.length];\r\n\t\tthis.stack[this.length] = undefined;\r\n\t}\r\n\treturn def || new this.newConstructor();\r\n}\r\n\r\n/**\r\n * @param {Object} i Objec to release, adding it to the pool.\r\n */\r\nPool.prototype.release = function(i) {\r\n\tthis.stack[this.length++] = i;\r\n}\r\n","\r\nlet color = {\r\n\r\n\t/**\r\n\t * @param {string} hex A hex string.\r\n\t */\r\n\thexToRgb: function(hex) {\r\n\t\tvar result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n\t\treturn result ? {\r\n\t\t\tr: parseInt(result[1], 16),\r\n\t\t\tg: parseInt(result[2], 16),\r\n\t\t\tb: parseInt(result[3], 16)\r\n\t\t} : null;\r\n\t},\r\n\t\r\n\t/**\r\n\t * @param {number} c The component.\r\n\t */\r\n\tcomponentToHex: function(c) {\r\n\t\tvar hex = c.toString(16);\r\n\t\treturn hex.length == 1 ? \"0\" + hex : hex;\r\n\t},\r\n\r\n\t/**\r\n\t * @param {number} r The red component.\r\n\t * @param {number} g The green component.\r\n\t * @param {number} b The blue component.\r\n\t */\r\n\trgbToHex: function(r, g, b) {\r\n\t\tlet c = color.componentToHex;\r\n\t\treturn \"#\" + c(r) + c(g) + c(b);\r\n\t}\r\n\t\r\n}\r\n\r\n//\r\nexport default color;","/**\r\n * @module event\r\n */\r\n \r\nimport keyValues from \"./keyvalues.js\";\r\n\r\n//\r\nlet events = {\r\n\t\r\n\tcreate: \"create\",\r\n\troomEnter: \"roomEnter\",\r\n\troomLeave: \"roomLeave\",\r\n\tstep: \"step\",\r\n\tdraw: \"draw\",\r\n\tcollision: \"collision_\",\r\n\tresize: \"resize\",\r\n\tkeyboard: {\r\n\t\t...translate( keyValues ),\r\n\t\tpressed: translate( keyValues, \"Pressed\" ),\r\n\t\treleased: translate( keyValues, \"Released\" )\r\n\t}\r\n\t\r\n}\r\n\t\r\n/**\r\n * @param {array} array\r\n * @param {string} [postfix=\"\"]\r\n */\r\nfunction translate( array, postfix = \"\" ) {\r\n\tlet obj = {};\r\n\tarray.forEach( function( name ) {\r\n\t\tobj[name] = name + postfix;\r\n\t} );\r\n\treturn obj;\r\n}\r\n\r\n//\r\nexport default events;","import draw from \"./../draw.js\";\r\nimport sprite from \"./../sprite.js\";\r\n\r\nconst noop = () => {};\r\n\r\n/** */\r\nexport default class Primitive {\r\n\r\n\t/**\r\n\t * @param {object} opts Options object.\r\n\t * @param {array} opts.points Array of Point objects.\r\n\t * @param {*} opts.texture Sprite object or name of sprite resource.\r\n\t * @param {*} opts.color Color of the primitive.\r\n\t * @param {string} opts.format Format of the points array.\r\n\t * @param {function} opts.modifier Point modifier function.\r\n\t * @param {number} opts.x X position to draw the primitive.\r\n\t * @param {number} opts.y Y position to draw the primitive.\r\n\t */\r\n\tconstructor(opts = {}) {\r\n\t\tthis.points = opts.points || [];\r\n\t\tthis.texture = opts.texture || null;\r\n\t\tthis.color = opts.color || \"#000000\";\r\n\t\tthis.format = opts.format || \"quads\";\r\n\t\tthis.modifier = opts.modifier || noop;\r\n\t\tthis.x = opts.x || 0;\r\n\t\tthis.y = opts.y || 0;\r\n\t}\r\n\t\r\n\t/** Method for drawing instantiated Primitive. */\r\n\tdraw() {\r\n\t\tPrimitive.draw(this);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Alternate way to create a new Primitive instance.\r\n\t * @param {object} opts See constructor.opts parameter.\r\n\t */\r\n\tstatic create(opts = {}) {\r\n\t\treturn new Primitive(opts);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {object} opts See constructor.opts parameter.\r\n\t */\r\n\tstatic draw(opts = {}) {\r\n\t\tif (opts.texture) drawTextured(opts);\r\n\t\telse drawBasic(opts);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction drawTextured(opts = {}) {\r\n\t\r\n\tlet texture = opts.texture;\r\n\tlet spr = sprite.get(texture);\r\n\tif (spr === null) {\r\n\t\tconsole.warn(\"No such texture: \" + texture);\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tlet ctx = draw.context;\r\n\tlet frame = spr.images[0];\r\n\tlet img = frame.img;\r\n\tlet w = spr.width;\r\n\tlet h = spr.height;\r\n\tlet tris = orderTriangleList(opts);\r\n\t\r\n\t//\r\n\tlet t;\r\n\tlet pts = applyModifier(opts.points, opts.modifier);\r\n\tlet len = tris.length;\r\n\tfor (t=0; t<len; t++) {\r\n\t\t\r\n\t\tvar pp = tris[t];\r\n\t\tvar x0 = pts[pp[0]].x, x1 = pts[pp[1]].x, x2 = pts[pp[2]].x;\r\n\t\tvar y0 = pts[pp[0]].y, y1 = pts[pp[1]].y, y2 = pts[pp[2]].y;\r\n\t\tvar u0 = pts[pp[0]].u*w, u1 = pts[pp[1]].u*w, u2 = pts[pp[2]].u*w;\r\n\t\tvar v0 = pts[pp[0]].v*h, v1 = pts[pp[1]].v*h, v2 = pts[pp[2]].v*h;\r\n\t\t\r\n\t\t// Set clipping area so that only pixels inside the triangle will\r\n\t\t// be affected by the image drawing operation\r\n\t\tctx.save();\r\n\t\tctx.beginPath();\r\n\t\tctx.moveTo(x0, y0);\r\n\t\tctx.lineTo(x1, y1);\r\n\t\tctx.lineTo(x2, y2);\r\n\t\tctx.closePath();\r\n\t\tctx.clip();\r\n\r\n\t\t// Compute matrix transform\r\n\t\tvar delta = u0*v1 + v0*u2 + u1*v2 - v1*u2 - v0*u1 - u0*v2;\r\n\t\tvar delta_a = x0*v1 + v0*x2 + x1*v2 - v1*x2 - v0*x1 - x0*v2;\r\n\t\tvar delta_b = u0*x1 + x0*u2 + u1*x2 - x1*u2 - x0*u1 - u0*x2;\r\n\t\tvar delta_c = u0*v1*x2 + v0*x1*u2 + x0*u1*v2 - x0*v1*u2\r\n\t\t\t\t\t  - v0*u1*x2 - u0*x1*v2;\r\n\t\tvar delta_d = y0*v1 + v0*y2 + y1*v2 - v1*y2 - v0*y1 - y0*v2;\r\n\t\tvar delta_e = u0*y1 + y0*u2 + u1*y2 - y1*u2 - y0*u1 - u0*y2;\r\n\t\tvar delta_f = u0*v1*y2 + v0*y1*u2 + y0*u1*v2 - y0*v1*u2\r\n\t\t\t\t\t  - v0*u1*y2 - u0*y1*v2;\r\n\r\n\t\t// Draw the transformed image\r\n\t\tctx.transform(delta_a/delta, delta_d/delta,\r\n\t\t\t\t\t  delta_b/delta, delta_e/delta,\r\n\t\t\t\t\t  delta_c/delta, delta_f/delta);\r\n\t\tctx.drawImage(img, 0, 0);\r\n\t\tctx.restore();\r\n\t}\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction drawBasic(opts = {}) {\r\n\tlet points = applyModifier(opts.points, opts.modifier);\r\n\tlet length = points.length;\r\n\tif (length > 0) {\r\n\t\tlet tris = orderQuadList(opts);\r\n\t\tlet i, ctx = draw.context;\r\n\t\tctx.fillStyle = opts.color || draw.color;\r\n\t\tfor (i=0; i<tris.length; i++) {\r\n\t\t\tlet tri = tris[i];\r\n\t\t\tlet n, p = points[tri[0]];\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.moveTo(p.x, p.y);\r\n\t\t\tfor (n=1; n<tri.length; n++) {\r\n\t\t\t\tp = points[tri[n]];\r\n\t\t\t\tctx.lineTo(p.x, p.y);\r\n\t\t\t}\r\n\t\t\tctx.closePath();\r\n\t\t\tctx.fill();\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction applyModifier(points, modifier) {\r\n\tlet newPoints = [];\r\n\tpoints.forEach(function(p) {\r\n\t\tlet newP = Object.assign({}, p, modifier.call(p));\r\n\t\tnewPoints.push(newP);\r\n\t});\r\n\treturn newPoints;\r\n}\r\n\r\n/**\r\n * @param {object} opts\r\n */\r\nfunction orderTriangleList(opts = {}) {\r\n\tlet tris = [];\r\n\tif (opts.format === \"quads\") {\r\n\t\tlet length = Math.floor(opts.points.length / 4);\r\n\t\tlet n, o = 0;\r\n\t\tfor (n=0; n<length; n++) {\r\n\t\t\ttris.push([o+0, o+1, o+2], [o+2, o+3, o+0]);\r\n\t\t\to += 4;\r\n\t\t}\r\n\t}\r\n\treturn tris;\r\n}\r\n\r\n/**\r\n * @param {object} opts\r\n */\r\nfunction orderQuadList(opts = {}) {\r\n\tlet tris = [];\r\n\tlet length = Math.floor(opts.points.length / 4);\r\n\tlet n, o = 0;\r\n\tfor (n=0; n<length; n++, o+=4) {\r\n\t\ttris.push([o+0, o+1, o+2, o+3]);\r\n\t}\r\n\treturn tris;\r\n}","import Room from \"./room\";\r\nimport Sound from \"./Sound\";\r\nimport draw from \"./draw\";\r\nimport instance from \"./instance\";\r\nimport input from \"./input\";\r\nimport math from \"./math\";\r\nimport sprite from \"./sprite\";\r\nimport Canvas from \"./canvas\";\r\nimport color from \"./color\";\r\nimport main from \"./main\";\r\nimport Camera from \"./camera\";\r\nimport App from \"./App\";\r\nimport Grid from \"./data/grid\";\r\nimport Tilemap from \"./tilemap\";\r\nimport tween from \"./tween\";\r\nimport Transition from \"./transition\";\r\nimport Primitive from \"./drawing/primitive\";\r\n \r\n/**\r\n * @param {string} varName\r\n * @param {value} value\r\n */\r\nfunction actionSet(varName, value, relative) {\r\n\tif (relative)\r\n\t\tthis[varName] += value\r\n\telse\r\n\t\tthis[varName] = value;\r\n}\r\n\r\n/**\r\n * @param {string} varName\r\n * @param {string} op Operation.\r\n * @param {value} value Value to check against.\r\n */\r\nfunction actionTest(varName, op, value) {\r\n\tswitch (op) {\r\n\t\tcase(\"!==\"): return this[varName] !== value;\r\n\t\tcase(\"===\"): return this[varName] === value;\r\n\t\tcase(\"!=\"): return this[varName] != value;\r\n\t\tcase(\"==\"): return this[varName] == value;\r\n\t\tcase(\"<\"): return this[varName] < value;\r\n\t\tcase(\">\"): return this[varName] > value;\r\n\t\tcase(\"<=\"): return this[varName] <= value;\r\n\t\tcase(\">=\"): return this[varName] >= value;\r\n\t\tdefault: return false;\r\n\t}\r\n}\r\n\r\n/**\r\n * Sets the instance's gravity to the given value.\r\n * @param {number} value The gravity strength.\r\n */\r\nfunction setGravity(value) {\r\n\tthis.gravity = value;\r\n}\r\n\r\n/**\r\n * Instantly sets the instance's x and y values to a random position within\r\n * the current room.\r\n * @param {number} x\r\n * @param {number} y\r\n * @param {boolean} relative\r\n */\r\nfunction actionJump(x, y, relative) {\r\n\tif (relative) {\r\n\t\tthis.x += Number(x);\r\n\t\tthis.y += Number(y);\r\n\t} else {\r\n\t\tthis.x = Number(x);\r\n\t\tthis.y = Number(y);\r\n\t}\r\n}\r\n\r\n/**\r\n * Instantly sets the instance's x and y values to a random position within\r\n * the current room.\r\n */\r\nfunction actionJumpRandom() {\r\n\tlet x1 = 0, y1 = 0, x2 = 640, y2 = 480;\r\n\tthis.x = Math.floor(Math.random() * (x2 - x1 + 1)) + x1;\r\n\tthis.y = Math.floor(Math.random() * (y2 - y1 + 1)) + y1;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction moveFree(speed, direction) {\r\n\tthis.speed = speed;\r\n\tthis.direction = direction;\r\n}\r\n\r\n/**\r\n * Instantly sets the instance's x and y values to a random position within\r\n * the current room.\r\n * @param {number} x\r\n * @param {number} y\r\n */\r\nfunction moveDirect(x, y) {\r\n\tthis.x += x * main.dt;\r\n\tthis.y += y * main.dt;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction moveSpeedX(speed) { this.speedX = Number(speed); }\r\nfunction moveSpeedY(speed) { this.speedY = Number(speed); }\r\nfunction moveReverseX() { this.speedX = -this.speedX; }\r\nfunction moveReverseY() { this.speedY = -this.speedY; }\r\n\r\n/**\r\n * Wraps the instance back into the room when it leaves.\r\n */\r\nfunction actionWrap() {\r\n\tlet width = this.boxRight - this.boxLeft;\r\n\tlet height = this.boxBottom - this.boxTop;\r\n\tlet thisRoom = Room.current;\r\n\tlet roomW = thisRoom.width;\r\n\tlet roomH = thisRoom.height;\r\n\tif (this.boxRight < 0) this.x += roomW + width;\r\n\tif (this.boxBottom < 0) this.y += roomH + height;\r\n\tif (this.boxLeft > roomW) this.x -= roomW + width;\r\n\tif (this.boxTop > roomH) this.y -= roomH + height;\r\n}\r\n\r\n/**\r\n * Wraps the instance back into the room when it leaves.\r\n */\r\nfunction actionConfine() {\r\n\tlet width = this.boxRight - this.boxLeft;\r\n\tlet height = this.boxBottom - this.boxTop;\r\n\tlet thisRoom = Room.current;\r\n\tlet roomW = thisRoom.width;\r\n\tlet roomH = thisRoom.height;\r\n\tif (this.boxLeft < 0) this.x = 0;\r\n\tif (this.boxTop < 0) this.y = 0;\r\n\tif (this.boxRight > roomW) this.x = roomW - width;\r\n\tif (this.boxBottom > roomH) this.y = roomH - height;\r\n}\r\n\r\n/**\r\n * Executes the given function with variable arguments on the instance.\r\n * @param {function} func\r\n * @param {...*} args\r\n */\r\nfunction actionFunc(func, ...args) {\r\n\tfunc.apply(this, args);\r\n}\r\n\r\n/**\r\n * Executes the given Script with an array of arguments.\r\n * @param {script} func\r\n * @param {array} args\r\n */\r\nfunction script(s, args) {\r\n\tconsole.log(window[s], args);\r\n\twindow[s].apply(this, args);\r\n}\r\n\r\n/**\r\n * Executes the given function with variable arguments on the instance.\r\n * @param {string} code\r\n */\r\nfunction code(code) {\r\n\tif (typeof code === \"string\") {\r\n\t\ttry {\r\n\t\t\teval(code);\r\n\t\t}\r\n\t\tcatch(err) {\r\n\t\t\tconsole.error(err.message);\r\n\t\t}\r\n\t} else {\r\n\t\tconsole.error(\"runCode(code); code must be a string!\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Shows the value of the given variable of the instance, in the console.\r\n * @param {...*} args\r\n */\r\nfunction actionGet(...args) {\r\n\tconsole.log(this[args].toFixed(2));\r\n}\r\n\r\n// Fucntions for use in code.\r\nlet GAME = {\r\n\tmain: {\r\n\t\tsetGameSpeed: main.setGameSpeed\r\n\t},\r\n\tinstance: {\r\n\t\tcreate: instance.create,\r\n\t\tcreateMoving: instance.createMoving,\r\n\t\tdestroy: instance.destroy,\r\n\t\tfind: instance.find,\r\n\t\tfindRandom: instance.findRandom,\r\n\t\tcount: instance.count,\r\n\t\tmouseOn: instance.mouseOn\r\n\t},\r\n\tdraw: Object.assign( draw, {\r\n\t\tself: instance.drawSelf,\r\n\t\tdebug: instance.drawDebug\r\n\t} ),\r\n\tCanvas: Canvas,\r\n\tcolor: color,\r\n\tsprite: {\r\n\t\tcreate: sprite.create,\r\n\t\taddFrame: sprite.addFrame,\r\n\t\ttint: sprite.tint,\r\n\t\tget: sprite.get,\r\n\t\tcache: sprite.cache\r\n\t},\r\n\tSound: Sound,\r\n\tRoom: Room,\r\n\tinput: {\r\n\t\tkeyboard: input.keyboard,\r\n\t\tmouse: input.mouse,\r\n\t\ttouch: input.touch\r\n\t},\r\n\tmath: math,\r\n\tCamera: Camera,\r\n\tApp: App,\r\n\tGrid: Grid,\r\n\tTilemap: Tilemap,\r\n\ttween: tween,\r\n\tTransition: Transition,\r\n\tPrimitive: Primitive\r\n}\r\n\r\n//\r\nlet blockBegin            = \"blockBegin\",\r\n\tblockEnd        \t  = \"blockEnd\",\r\n\texitEvent        \t  = \"exitEvent\",\r\n\troomEnter             = Room.enter,\r\n\troomNext              = Room.next,\r\n\troomPrevious          = Room.previous,\r\n\tinstanceCreate    \t  = instance.create,\r\n\tinstanceCreateMoving  = instance.createMoving,\r\n\tinstanceDestroy       = instance.destroy,\r\n\tchangeSprite  \t\t  = instance.changeSprite,\r\n\tinstanceSetRotation   = instance.setRotation,\r\n\tinstanceSetDirection  = instance.setDirection,\r\n\tmessage               = console.log,\r\n\talert                 = function(m) { window.alert(m) },\r\n\tconfirm               = function(m) { return window.confirm(m) },\r\n\tdrawSetColor          = draw.setColor,\r\n\tdrawSetFont           = draw.setFont,\r\n\tdrawSetFontSize       = draw.setFontSize,\r\n\tdrawText              = draw.text,\r\n\tdrawSelf              = instance.drawSelf,\r\n\tdrawSprite            = draw.sprite,\r\n\tsoundPlay = function(snd, loop) {Sound.play(snd, {loop: loop})},\r\n\tsoundStop = Sound.stop;\r\n\r\n//\r\nexport {\r\n\tinstanceCreate,\r\n\tinstanceCreateMoving,\r\n\tinstanceDestroy,\r\n\tinstanceSetRotation,\r\n\tinstanceSetDirection,\r\n\tchangeSprite,\r\n\tchangeSprite as instanceChangeSprite,\r\n\tsoundPlay, soundStop,\r\n\tdrawSetColor,\r\n\tdrawSetFont,\r\n\tdrawSetFontSize,\r\n\tdrawText,\r\n\tdrawSelf,\r\n\tdrawSelf as instanceDrawSelf,\r\n\tdrawSprite,\r\n\troomEnter, roomNext, roomPrevious,\r\n\tblockBegin, blockEnd,\r\n\texitEvent,\r\n\tactionSet        as set,\r\n\tactionGet        as get,\r\n\tactionTest       as test,\r\n\tactionTest,\r\n\tsetGravity,\r\n\tactionJump       as jump,\r\n\tactionJumpRandom as jumpRandom,\r\n\tmoveFree,\r\n\tmoveDirect,\r\n\tmoveSpeedX,\r\n\tmoveSpeedY,\r\n\tmoveReverseX,\r\n\tmoveReverseY,\r\n\tactionWrap,\r\n\tactionConfine,\r\n\tactionWrap       as wrap,\r\n\tactionConfine    as confine,\r\n\tactionFunc       as func,\t// DEPRECATE?\r\n\tscript,\r\n\tcode,\r\n\tmessage,\r\n\talert,\r\n\tconfirm,\r\n\tGAME\r\n}\r\n","import Generator from \"./generator.js\";\r\nimport Grid from \"./data/grid.js\";\r\nimport draw from \"./draw.js\";\r\nimport Sprite from \"./sprite.js\";\r\n\r\n/**\r\n * @author Jack Oatley\r\n */\r\nexport default class Tilemap {\r\n\t\r\n\t/**\r\n\t * @param {object} [opts={}] Options object to define the Tilemap.\r\n\t * @param {sprite} [opts.atlas]\r\n\t * @param {number} [opts.tileWidth]\r\n\t * @param {number} [opts.tileHeight]\r\n\t * @param {number} [opts.tileSpacing]\r\n\t * @param {number} [opts.tileOverlay]\r\n\t * @param {number} [opts.tilesWide]\r\n\t * @param {number} [opts.mapWidth]\r\n\t * @param {number} [opts.mapHeight]\r\n\t */\r\n\tconstructor(opts = {}) {\r\n\t\tthis.textureAtlas = opts.atlas || null;\r\n\t\tthis.tileWidth = opts.tileWidth || 16;\r\n\t\tthis.tileHeight = opts.tileHeight || 16;\r\n\t\tthis.tileSpacing = opts.tileSpacing || 0;\r\n\t\tthis.tileOverlay = opts.tileOverlay || 0;\r\n\t\tthis.tilesWide = opts.tilesWide || 16;\r\n\t\tthis.mapWidth = opts.mapWidth || 16;\r\n\t\tthis.mapHeight = opts.mapHeight || 16;\r\n\t\tthis.layers = {};\r\n\t\t\r\n\t\tthis.__gap = this.tileSpacing + this.tileOverlay;\r\n\t\tif (this.textureAtlas)\r\n\t\t\tthis.__atlas = Sprite.get(this.textureAtlas).images[0].img;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {string} layer Name of the player in which to place the tile.\r\n\t * @param {number} x The X grid position to place this tile.\r\n\t * @param {number} y The Y grid position to place this tile.\r\n\t * @param {number} index The tile index.\r\n\t */\r\n\tset(layer, x, y, index) {\r\n\t\tif (!this.layers[layer]) {\r\n\t\t\tthis.layers[layer] = new Grid(this.mapWidth, this.mapHeight);\r\n\t\t}\r\n\t\tthis.layers[layer].set(x, y, index);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {object} [opts={}]\r\n\t * @param {array} [opts.order]\r\n\t * @param {number} [opts.left]\r\n\t * @param {number} [opts.top]\r\n\t * @param {number} [opts.right]\r\n\t * @param {number} [opts.bottom]\r\n\t */\r\n\tdraw(opts) {\r\n\t\tconst atlas = this.__atlas;\r\n\t\tconst tw = this.tileWidth;\r\n\t\tconst th = this.tileHeight;\r\n\t\tconst tsw = this.tilesWide;\r\n\t\tconst gap = this.__gap;\r\n\t\tconst overlay = this.tileOverlay;\r\n\t\tconst renderWidth = tw + overlay * 2;\r\n\t\tconst renderHeight = th + overlay * 2;\r\n\t\tconst order = opts.order || Object.keys(this.layers);\r\n\t\tconst startX = ~~(Math.max(0, (opts.left || 0) / tw));\r\n\t\tconst startY = ~~(Math.max(0, (opts.top || 0) / th));\r\n\t\tconst endX = Math.ceil(Math.min(this.mapWidth, (opts.right || 0) / tw));\r\n\t\tconst endY = Math.ceil(Math.min(this.mapHeight, (opts.bottom || 0) / th));\r\n\t\tlet x, y, n, layer, tile, iX, iY;\r\n\t\tfor (n=0; n<order.length; n++) {\r\n\t\t\tlayer = this.layers[order[n]];\r\n\t\t\tfor (x=startX; x<endX; x++)\r\n\t\t\tfor (y=startY; y<endY; y++) {\r\n\t\t\t\ttile = layer.get(x, y) - 1;\r\n\t\t\t\tif (tile >= 0) {\r\n\t\t\t\t\tiX = (tile % tsw) * (tw + gap*2) + gap;;\r\n\t\t\t\t\tiY = ~~(tile / tsw) * (th + gap*2) + gap;\r\n\t\t\t\t\tdraw.context.drawImage(\r\n\t\t\t\t\t\tatlas,\r\n\t\t\t\t\t\tiX - overlay, iY - overlay,\r\n\t\t\t\t\t\trenderWidth, renderHeight,\r\n\t\t\t\t\t\tx * tw - overlay, // target x\r\n\t\t\t\t\t\ty * th - overlay, // target y\r\n\t\t\t\t\t\trenderWidth, renderHeight\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n\r\n// Static methods, created via the Generator class\r\nGenerator.classStaticMatch(Tilemap);\r\nTilemap.prototype.assetType = \"tilemap\";","import global from \"./global.js\";\r\nimport object from \"./object.js\";\r\nimport sprite from \"./sprite.js\";\r\nimport Sound from \"./Sound\";\r\nimport room from \"./room.js\";\r\n \r\n/**\r\n * @author Jack Oatley\r\n */\r\nexport default class Compiler {\r\n\t\r\n\t/**\r\n\t * @param {string} exp\r\n\t */\r\n\tstatic actionExpression(exp) {\r\n\t\t\r\n\t\tif (!isNaN(Number(exp)))\r\n\t\t\treturn Number(exp);\r\n\t\t\r\n\t\tif (Compiler.isBoolean(exp)) {\r\n\t\t\treturn exp === true || exp === \"true\";\r\n\t\t}\r\n\t\t\r\n\t\tif (Compiler.isFunction(exp)\r\n\t\t||  Compiler.isOperator(exp)\r\n\t\t||  Compiler.isResource(exp)\r\n\t\t||  Compiler.isCss(exp))\r\n\t\t\treturn exp;\r\n\t\t\t\r\n\t\tconsole.log(exp);\r\n\t\t\t\r\n\t\tif (Compiler.isString(exp)) {\r\n\t\t\treturn exp.slice(1, -1);\r\n\t\t}\r\n\t\t\r\n\t\tif (typeof exp === \"string\") {\r\n\t\t\r\n\t\t\tlet n,\r\n\t\t\t\tstring = \"\",\r\n\t\t\t\tsIndex = -1,\r\n\t\t\t\tnewArr = [];\r\n\t\t\t\t\r\n\t\t\tfor (n = 0; n < exp.length; n++) {\r\n\t\t\t\t\r\n\t\t\t\tlet c = exp.charAt(n);\r\n\t\t\t\tswitch (c) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tcase (\"'\"):\r\n\t\t\t\t\t\tif (sIndex === -1) {\r\n\t\t\t\t\t\t\tsIndex = n + 1\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tnewArr.push(\"'\" + exp.slice(sIndex, n) + \"'\");\r\n\t\t\t\t\t\t\tsIndex = -1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tif (sIndex === -1 && c !== \" \") {\r\n\t\t\t\t\t\t\tif (Compiler.splitCharacters.includes(c)) {\r\n\t\t\t\t\t\t\t\tif (string !== \"\") {\r\n\t\t\t\t\t\t\t\t\tnewArr.push(string);\r\n\t\t\t\t\t\t\t\t\tstring = \"\";\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tnewArr.push(c);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tstring += c;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (string !== \"\") {\r\n\t\t\t\tnewArr.push(string);\r\n\t\t\t\tstring = \"\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet y = \"\";\r\n\t\t\t\r\n\t\t\tnewArr.forEach((word) => {\r\n\t\t\t\tlet num = parseInt(word);\r\n\t\t\t\tif (isNaN(num)) {\r\n\t\t\t\t\tlet c = word.charAt(0);\r\n\t\t\t\t\tif (c === \"'\") {\r\n\t\t\t\t\t\ty += word;\r\n\t\t\t\t\t} else if (Compiler.splitCharacters.includes(c)) {\r\n\t\t\t\t\t\ty += word;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (word === \"fps\")\r\n\t\t\t\t\t\t\ty += global.fps;\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (!Compiler.isResource(word)\r\n\t\t\t\t\t\t\t&&  Compiler.isSingleWord(word)\r\n\t\t\t\t\t\t\t&&  !Compiler.isString(word)\r\n\t\t\t\t\t\t\t&&  !Compiler.isArray(word)) {\r\n\t\t\t\t\t\t\t\ty += \"this.\" + word;\r\n\t\t\t\t\t\t\t\t//this[word] = this[word] || word;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\ty += word;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\ty += word;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tconsole.log(y);\r\n\t\t\treturn eval(y);\r\n\t\t}\r\n\t\t\r\n\t\treturn exp;\r\n\r\n\t}\r\n\t\r\n\t/** */\r\n\tstatic isResource(x) {\r\n\t\treturn object.names.includes(x)\r\n\t\t\t|| sprite.names.includes(x)\r\n\t\t\t|| Sound.names.includes(x)\r\n\t\t\t|| room.names.includes(x)\r\n\t\t\t|| x === \"Say\";\r\n\t}\r\n\t\r\n\t/** */\r\n\tstatic isArray(x) {\r\n\t\treturn x.charAt(0) === \"[\";\r\n\t}\r\n\t\r\n\t/** */\r\n\tstatic isString(x) {\r\n\t\treturn x.charAt(0) === \"\\\"\";\r\n\t}\r\n\t\r\n\t/** */\r\n\tstatic isSingleWord(x) {\r\n\t\treturn !x.includes(\".\");\r\n\t}\r\n\t\r\n\t/** */\r\n\tstatic isFunction(x) {\r\n\t\treturn typeof x === \"function\";\r\n\t}\r\n\t\r\n\t/** */\r\n\tstatic isBoolean(x) {\r\n\t\treturn Compiler.booleans.includes(x);\r\n\t}\r\n\t\r\n\t/** */\r\n\tstatic isOperator(x) {\r\n\t\treturn Compiler.assignmentOperators.includes(x);\r\n\t}\r\n\t\r\n\t/** */\r\n\tstatic isCss(x) {\r\n\t\treturn x.charAt(0) === \"#\";\r\n\t}\r\n\r\n}\r\n\r\nCompiler.booleans = [true, false, \"true\", \"false\"];\r\nCompiler.assignmentOperators = [\"<\", \">\", \"<=\", \">=\", \"==\", \"===\", \"!=\", \"!==\"];\r\nCompiler.splitCharacters = [\"+\", \"-\", \"=\", \"!\"];","import App from \"./App\";\r\nimport main from \"./main\";\r\nimport canvas from \"./canvas\";\r\nimport Camera from \"./camera\";\r\nimport Room from \"./room\";\r\nimport input from \"./input\";\r\nimport sprite from \"./sprite\";\r\nimport Sound from \"./Sound\";\r\nimport object from \"./object\";\r\nimport event from \"./event\";\r\nimport * as action from \"./action\";\r\nimport instance from \"./instance\";\r\nimport draw from \"./draw\";\r\nimport math from \"./math\";\r\nimport tween from \"./tween\";\r\nimport Transition from \"./transition\";\r\nimport Primitive from \"./drawing/primitive\";\r\nimport Font from \"./font\";\r\nimport Grid from \"./data/grid\";\r\n\r\nexport {\r\n\tApp,\r\n\tmain,\r\n\tcanvas,\r\n\tCamera,\r\n\tRoom,\r\n\tinput,\r\n\tsprite,\r\n\tSound,\r\n\tobject,\r\n\tevent,\r\n\taction,\r\n\tinstance,\r\n\tdraw,\r\n\tmath,\r\n\ttween,\r\n\tTransition,\r\n\tFont,\r\n\tGrid\r\n}\r\n"],"sourceRoot":""}